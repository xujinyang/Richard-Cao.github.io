<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lifecycle</title>
  <subtitle>真正的梦就是现实的彼岸。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://richard-cao.github.io/"/>
  <updated>2016-07-30T04:43:26.213Z</updated>
  <id>http://richard-cao.github.io/</id>
  
  <author>
    <name>RichardCao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>聊聊我的处女作：reading</title>
    <link href="http://richard-cao.github.io/2016/07/05/Talk-About-Reading/"/>
    <id>http://richard-cao.github.io/2016/07/05/Talk-About-Reading/</id>
    <published>2016-07-05T00:36:54.000Z</published>
    <updated>2016-07-30T04:43:26.213Z</updated>
    
    <content type="html"><![CDATA[<p>转载请注明出处：<a href="http://richardcao.me/" target="_blank" rel="external">http://richardcao.me/</a></p>
<p><strong><a href="https://github.com/attentiveness/reading" target="_blank" rel="external">戳我关注reading</a></strong></p>
<p><a href="https://github.com/attentiveness/reading/stargazers" target="_blank" rel="external"><img src="https://img.shields.io/github/stars/attentiveness/reading.svg" alt="GitHub stars"></a></p>
<blockquote>
<ul>
<li>不知不觉reading项目已经有500+star了，作为自己的处女作，感到非常开心。感谢关注reading的人，我会坚持继续维护下去。</li>
<li>No Profit, No Advertisement, Only Feelings</li>
</ul>
</blockquote>
<hr>
<h2 id="reading初衷"><a href="#reading初衷" class="headerlink" title="reading初衷"></a>reading初衷</h2><p>其实做reading项目的初衷很简单，就是我想自己尝试着用react-native写一个app。真正开始写的时候，大概是五、六个月前的样子，想把自己在实战中的一些经验用代码的方式展现出来，抛砖引玉，和大家一起交流进步。那时候github上国内的react-native开源app还很少，而且大多都没继续维护了，于是自己下决心好好做一个，好好维护下去。不知不觉半年了，每次打开reading项目代码，还是感到一阵亲切。开源reading，可以让reading成长的更快更好，同时对我而言也是一样。对待自己的处女作开源项目，我格外认真，目标是把reading打造成一个高质量的开源项目。</p>
<h2 id="reading架构演进"><a href="#reading架构演进" class="headerlink" title="reading架构演进"></a>reading架构演进</h2><p>再小的APP也有自己的架构，reading也不例外。在项目的readme中，我简单的提到了<a href="https://github.com/attentiveness/reading#application-architecture" target="_blank" rel="external">reading的架构</a>，这里我分享下reading从一开始到现在发生了哪些变化。</p>
<blockquote>
<p>reading是基于react-native开发的Android &amp; iOS双平台的APP，数据流和状态通过redux进行管理，并且在摸索着进行UT。</p>
</blockquote>
<p>reading现在的架构是这样的：</p>
<blockquote>
<ul>
<li>actions：redux中action部分都在这里</li>
<li>components：reading中用到的通用控件，全部抽离出来在这里，同时任何一个react-native app，都可以直接拿去用，支持Android &amp; iOS双平台</li>
<li>constants：这里主要是一些常量，比如action的type，一些字符常量，url常量，还可以有颜色常量等各种</li>
<li>containers：容器层，需要注入state的地方，我会用容器包一层。如果有需要页面中用到多个组件拼成，也通过容器包一层，达到复用。app入口也在这里</li>
<li>img：这里主要放图片资源</li>
<li>pages：这里主要放页面，其实就是组件。目前来看，这里面的组件其实都是reading的单个页面。其实页面是可以组合的，在外面包一层容器的话，就可以进行组合。一些复杂的页面，完全可以通过这种方式去做，复用性更高，而且还能解耦</li>
<li>reducers：redux中reducer部分都在这里，reducer和action不一定是一一对应的，数量也不一定是相等的。state可以进行各种颗粒度的细分，最后通过<code>combine</code>函数合为一个。拆分state非常重要，它涉及到性能优化，不同的state通过不同的reducer进行处理，然后渲染不同的页面，甚至是渲染同一个页面中的不同组件，这样就避免了过渡渲染。如果不拆分，当一个大state改变的时候，所有的页面都会重新render，这是很浪费性能的</li>
<li>store：redux的store部分，通过reducer和各种各样的middleware创建store。例如redux-thunk，redux-logger等</li>
<li>utils：工具包</li>
<li>root.js：统一index.android.js和index.ios.js入口，通过react-redux中的<code>Provider</code>组件包裹整个APP</li>
</ul>
</blockquote>
<p>以上均为reading的js部分。目前reading中除了引用的第三方库含有原生代码，我几乎没写什么原生代码，我想尝试用js的方式去写。不排除如果后面功能复杂的话，会加一些原生（暂时并不会写OC……）。reading项目是我主打以rn为主原生为辅的开发方式构建跨平台的开源APP。</p>
<h3 id="起初"><a href="#起初" class="headerlink" title="起初"></a>起初</h3><p>一开始，reading是没有这些东西的，所有代码都是一坨……完全没有模块划分的东西。当时我还在饿了么尝试在蜂鸟众包app中加入react-native模块，也没有任何架构，完全不具备可扩展性。第一次重构发生在我想要加功能的时候，根本没法加，于是我本能的感觉代码是有问题的。当时react-native资料除了官方文档其他的少之又少，中文资料根本没有，于是我找到了一个老外写的app，感觉很6，clone了代码下来读。读完了之后，照猫画虎的重构了一下，有了简单的分层，这就是reading架构的雏形。在这个时候，我才明白redux是个什么东西，怎么用，分层是什么样的。</p>
<h3 id="第一次里程碑"><a href="#第一次里程碑" class="headerlink" title="第一次里程碑"></a>第一次里程碑</h3><p>由于根本没法加功能，于是我进行了第一次重构。我的记忆中，经历过第一次重构，reading的代码从一坨变成了这样：</p>
<blockquote>
<ul>
<li>actions：redux中action部分都在这里</li>
<li>components：reading中用到的通用控件，并且在当时所有的页面也在这里，并不支持ios平台</li>
<li>constants：这里主要是一些常量，当时只有action的type</li>
<li>containers：容器层，app入口也在这里，当时我所有的页面都会有一个容器，存在资源浪费和过渡渲染的问题</li>
<li>img：这里主要放图片资源</li>
<li>reducers：redux中reducer部分都在这里，当时我误认为reducer和action必须一一对应，于是我按照一一对应去写的，这样的思路是有问题的</li>
<li>store：redux的store部分，通过reducer和各种各样的middleware创建store。当时还不太清楚异步action和同步action的问题，所以redux-thunk都没用上，更别提redux-logger了</li>
<li>utils：工具包</li>
<li>root.js：统一index.android.js和index.ios.js入口，通过react-redux中的<code>Provider</code>组件包裹整个APP</li>
</ul>
</blockquote>
<p>可以看出，这就是reading现有架构的雏形。它已经初步规定了数据流向，规定了系统分层与组件间的关系等。在这个架构的基础上，我添加了reading最初也是最基础的几个功能。</p>
<h3 id="再一次改变"><a href="#再一次改变" class="headerlink" title="再一次改变"></a>再一次改变</h3><p>写着写着，也发了几个版本，感觉性能有点问题，也看了更多的一些代码，跟着官方更新的脚步思考，又看了一些文章，反反复复，我觉得我的代码存在一些问题，需要进一步修改。当时我意识到的问题有：</p>
<blockquote>
<ul>
<li>redux使用存在过度渲染问题，数据流管理有点乱，需要重点优化</li>
<li>组件和页面的概念有点模糊，需要进一步界定</li>
<li>action和reducer的概念有点模糊，需要更清晰的理解</li>
<li>组件化思想愈发明确，action中需要异步与同步共同处理</li>
</ul>
</blockquote>
<p>首先，关于redux的问题，其实是一连串的问题，也是我之前没有搞清楚的概念。我一直认为action和reducer是一一对应的，其实完全不是的，更形象的说，是多对多的。redux的state最后会合并成一个，所以为了避免每次改变state都刷新所有的页面，应该拆分state，局部刷新，这样可以避免过度渲染。只要我们根据实际情况，把reducer拆开，action可以根据一个页面定义一个，然后一个页面完全可以对应多个reducer去操作，这样不光解决了性能问题，数据流管理也更加清晰了。其实这里涉及到2个框架：<code>redux</code>和<code>react-redux</code>，拆分了之后需要用react-redux的<code>connect</code>函数按需注入<code>dispatch</code>和<code>state</code>，这时候拆分的reducer就起作用啦，模块中containers部分也得到了优化，从一个页面对应一个容器，优化到需要注入的页面才有容器，不需要的就不要容器。概念区分清楚了，定义就完全自由了。<br>其次，关于组件和页面的问题，我干脆加了一个pages包，专门放页面，相当于页面级的组件，和业务相关，components里只放通用模块组件，保证我拿到别的项目分分钟一样可以用起来，这样一拆分，瞬间清爽多了。<br>组件化思想驱使我在action中处理同步+异步的问题，之前的代码中，网络请求等明显的异步action是放在页面组件中的，现在全部抽走拿到action中，也就是说V这一层被解耦了，只和action、reducer相关，这个action我感觉有点像Android MVP架构中的P层。</p>
<h3 id="Android-amp-iOS统一"><a href="#Android-amp-iOS统一" class="headerlink" title="Android &amp; iOS统一"></a>Android &amp; iOS统一</h3><p>架构暂时稳定了一段时间，我考虑兼容iOS。因为我起初是只做了android平台，所以在兼容ios的时候，主要还是在UI的部分，其实并不难，在做android的时候，我就考虑到了后续兼容ios的问题，组件方法函数等都考虑到了ios，这部分我做的最多的还是UI层的统一。在代码改动最少的情况下兼容ios，而且reading的业务逻辑并不复杂，于是很容易就做到啦。</p>
<p>reading发展到现在，大致上经历了这四个过程，后面还有很长的路要走，要学习的东西还有很多。</p>
<h2 id="reading未来发展"><a href="#reading未来发展" class="headerlink" title="reading未来发展"></a>reading未来发展</h2><p>下一步，reading会基于Android &amp; iOS双平台的基础上，继续做一些事情，在这里我简单列举一下：</p>
<blockquote>
<ul>
<li>redux还有很多更高级的玩法，还需要再琢磨琢磨<a href="http://redux.js.org/" target="_blank" rel="external">redux的官方文档和react-redux的API文档</a>，翻译的很棒的中文版<a href="http://cn.redux.js.org/" target="_blank" rel="external">在这里</a></li>
<li>逻辑+UI的测试框架我已经跑通，如何编写有价值的测试用例也是我需要学习的</li>
<li>目前reading项目中Navigator机制用的是官方提供的<a href="http://facebook.github.io/react-native/docs/navigator.html" target="_blank" rel="external">Navigator</a>实现双平台的统一，但是关注react-native动态的小伙伴都知道，官方正在做一款新的Navigator机制：<code>NavigationExperimental</code>。最近的版本release note里关于这个的内容很多，暂时还不稳定，所以我还没去看，官方在issue里表示过，新的Navigator很快就会release，到时候我会在reading中进行切换</li>
<li>我会时刻关注react-native动态，会在reading的代码中体现出来</li>
</ul>
</blockquote>
<h2 id="最后说几句"><a href="#最后说几句" class="headerlink" title="最后说几句"></a>最后说几句</h2><p>reading还有很长的路要走，我的目标是把它打造成<strong>国内优质的react-native APP开源项目</strong>，让想学习rn快速搭建APP的人通过学习reading的代码，系统性的搭建起属于自己的APP，并且进行各种各样的架构优化与演进，用于开源项目或者商业项目，体现价值。欢迎大家与我交流，提issue，pr给我。</p>
<h2 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h2><p>感谢<a href="https://github.com/luics" target="_blank" rel="external">鬼道</a>大哥star了reading项目，鼓励我让我继续加油。刚开始接触react-native的时候，什么都不会，很多问题都是请教了鬼道大哥才明白，经常交流，受益匪浅。同时，热烈庆祝<a href="https://github.com/alibaba/weex" target="_blank" rel="external">weex</a>开源，阿里巴巴对技术的执着追求让我敬仰，对开源社区的贡献让我钦佩。虽然我现在还非常弱小，但我也非常愿意在开源社区贡献自己的力量，伴随我的成长，相信这股力量会越来越强大。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请注明出处：&lt;a href=&quot;http://richardcao.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://richardcao.me/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.c
    
    </summary>
    
      <category term="open source" scheme="http://richard-cao.github.io/categories/open-source/"/>
    
    
      <category term="react-native" scheme="http://richard-cao.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit2源码分析（一）</title>
    <link href="http://richard-cao.github.io/2016/05/29/Retrofit2%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://richard-cao.github.io/2016/05/29/Retrofit2源码分析（一）/</id>
    <published>2016-05-29T19:51:36.000Z</published>
    <updated>2016-07-30T04:43:26.213Z</updated>
    
    <content type="html"><![CDATA[<p>转载请注明出处：<a href="http://richardcao.me/" target="_blank" rel="external">http://richardcao.me/</a></p>
<blockquote>
<p>本文将顺着<strong>构建请求对象→构建请求接口→发起同步/异步请求</strong>的流程，分析retrofit2是如何实现的。</p>
</blockquote>
<h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><p>Retrofit2源码主要分为以下几个部分：</p>
<ul>
<li>retrofit</li>
<li>retrofit-adapters</li>
<li>retrofit-converters</li>
</ul>
<p>本篇先分析retrofit部分，也就是retrofit源码的主干部分。</p>
<p>下面顺着retrofit2的使用流程进行分析。</p>
<h2 id="Retrofit对象的构建"><a href="#Retrofit对象的构建" class="headerlink" title="Retrofit对象的构建"></a>Retrofit对象的构建</h2><p>首先我们看看构建一个Retrofit对象，都需要或者可选哪些配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Build a new &#123;<span class="doctag">@link</span> Retrofit&#125;.</div><div class="line">   * &lt;p&gt;</div><div class="line">   * Calling &#123;<span class="doctag">@link</span> #baseUrl&#125; is required before calling &#123;<span class="doctag">@link</span> #build()&#125;. All other methods</div><div class="line">   * are optional.</div><div class="line">   */</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">  	<span class="comment">//支持的平台</span></div><div class="line">    <span class="keyword">private</span> Platform platform;</div><div class="line">    <span class="comment">//发起请求的okhttp3的client工厂</span></div><div class="line">    <span class="keyword">private</span> okhttp3.Call.Factory callFactory;</div><div class="line">    <span class="comment">//okhttp3里的HttpUrl对象，用来解析和包装url</span></div><div class="line">    <span class="keyword">private</span> HttpUrl baseUrl;</div><div class="line">    <span class="comment">//转换器的工厂集合，retrofit构建可以插入多个转换器，比如gson转换器，Jackson转换器等</span></div><div class="line">    <span class="keyword">private</span> List&lt;Converter.Factory&gt; converterFactories = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="comment">//用来发起request和接收response的Call适配器，retrofit支持rxjava就是通过引入retrofit-adapters支持的，就是这个CallAdapter，这里先不作过多解释</span></div><div class="line">    <span class="keyword">private</span> List&lt;CallAdapter.Factory&gt; adapterFactories = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="comment">//Executor并发框架，包括线程池等</span></div><div class="line">    <span class="keyword">private</span> Executor callbackExecutor;</div><div class="line">    <span class="comment">//是否需要立即生效</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> validateEagerly;</div><div class="line"></div><div class="line">    Builder(Platform platform) &#123;</div><div class="line">      <span class="keyword">this</span>.platform = platform;</div><div class="line">      <span class="comment">// Add the built-in converter factory first. This prevents overriding its behavior but also</span></div><div class="line">      <span class="comment">// ensures correct behavior when using converters that consume all types.</span></div><div class="line">      converterFactories.add(<span class="keyword">new</span> BuiltInConverters());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>(Platform.get());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>Retrofit对象的构建使用了建造者模式，这里有一系列参数可以供我们选择，我给这些参数加了注释。这里构造方法中<code>Platform.get()</code>就是获取当前使用retrofit的平台信息，之前我用retrofit的时候，以为只支持Android平台，没想到还支持java8和ios，只不过这里的ios是指通过<a href="https://robovm.com/" target="_blank" rel="external">robovm平台</a>构建的ios程序，目前robovm主要的成功案例还是游戏，跨android &amp; ios双平台。在Builder中，有一个比较重要的配置项，就是baseURL。我们设置baseUrl就是一个string字符串，retrofit是这么处理的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Set the API base URL.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * The specified endpoint values (such as with &#123;<span class="doctag">@link</span> GET <span class="doctag">@GET</span>&#125;) are resolved against this</div><div class="line">     * value using &#123;<span class="doctag">@link</span> HttpUrl#resolve(String)&#125;. The behavior of this matches that of an</div><div class="line">     * &#123;<span class="doctag">@code</span> &lt;a href=""&gt;&#125; link on a website resolving on the current URL.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * &lt;b&gt;Base URLs should always end in &#123;<span class="doctag">@code</span> /&#125;.&lt;/b&gt;</div><div class="line">     * &lt;p&gt;</div><div class="line">     * A trailing &#123;<span class="doctag">@code</span> /&#125; ensures that endpoints values which are relative paths will correctly</div><div class="line">     * append themselves to a base which has path components.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * &lt;b&gt;Correct:&lt;/b&gt;&lt;br&gt;</div><div class="line">     * Base URL: http://example.com/api/&lt;br&gt;</div><div class="line">     * Endpoint: foo/bar/&lt;br&gt;</div><div class="line">     * Result: http://example.com/api/foo/bar/</div><div class="line">     * &lt;p&gt;</div><div class="line">     * &lt;b&gt;Incorrect:&lt;/b&gt;&lt;br&gt;</div><div class="line">     * Base URL: http://example.com/api&lt;br&gt;</div><div class="line">     * Endpoint: foo/bar/&lt;br&gt;</div><div class="line">     * Result: http://example.com/foo/bar/</div><div class="line">     * &lt;p&gt;</div><div class="line">     * This method enforces that &#123;<span class="doctag">@code</span> baseUrl&#125; has a trailing &#123;<span class="doctag">@code</span> /&#125;.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * &lt;b&gt;Endpoint values which contain a leading &#123;<span class="doctag">@code</span> /&#125; are absolute.&lt;/b&gt;</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Absolute values retain only the host from &#123;<span class="doctag">@code</span> baseUrl&#125; and ignore any specified path</div><div class="line">     * components.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Base URL: http://example.com/api/&lt;br&gt;</div><div class="line">     * Endpoint: /foo/bar/&lt;br&gt;</div><div class="line">     * Result: http://example.com/foo/bar/</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Base URL: http://example.com/&lt;br&gt;</div><div class="line">     * Endpoint: /foo/bar/&lt;br&gt;</div><div class="line">     * Result: http://example.com/foo/bar/</div><div class="line">     * &lt;p&gt;</div><div class="line">     * &lt;b&gt;Endpoint values may be a full URL.&lt;/b&gt;</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Values which have a host replace the host of &#123;<span class="doctag">@code</span> baseUrl&#125; and values also with a scheme</div><div class="line">     * replace the scheme of &#123;<span class="doctag">@code</span> baseUrl&#125;.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Base URL: http://example.com/&lt;br&gt;</div><div class="line">     * Endpoint: https://github.com/square/retrofit/&lt;br&gt;</div><div class="line">     * Result: https://github.com/square/retrofit/</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Base URL: http://example.com&lt;br&gt;</div><div class="line">     * Endpoint: //github.com/square/retrofit/&lt;br&gt;</div><div class="line">     * Result: http://github.com/square/retrofit/ (note the scheme stays 'http')</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">baseUrl</span><span class="params">(HttpUrl baseUrl)</span> </span>&#123;</div><div class="line">      checkNotNull(baseUrl, <span class="string">"baseUrl == null"</span>);</div><div class="line">      List&lt;String&gt; pathSegments = baseUrl.pathSegments();</div><div class="line">      <span class="keyword">if</span> (!<span class="string">""</span>.equals(pathSegments.get(pathSegments.size() - <span class="number">1</span>))) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"baseUrl must end in /: "</span> + baseUrl);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">this</span>.baseUrl = baseUrl;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里的注释非常详细，讲解了baseUrl到底是什么，应该遵循什么样的格式，然后经过HttpUrl的解析，组合成okhttp3用来请求的url链接。这里规定了baseUrl末尾应该以<code>/</code>符号结尾，在后续API的接口类中后半部分定义应该不以<code>/</code>开头，这是和retrofit 1.x版本不同的地方。最后就是build方法了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Create the &#123;<span class="doctag">@link</span> Retrofit&#125; instance using the configured values.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Note: If neither &#123;<span class="doctag">@link</span> #client&#125; nor &#123;<span class="doctag">@link</span> #callFactory&#125; is called a default &#123;<span class="doctag">@link</span></div><div class="line">     * OkHttpClient&#125; will be created and used.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Retrofit <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (baseUrl == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Base URL required."</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      okhttp3.Call.Factory callFactory = <span class="keyword">this</span>.callFactory;</div><div class="line">      <span class="keyword">if</span> (callFactory == <span class="keyword">null</span>) &#123;</div><div class="line">        callFactory = <span class="keyword">new</span> OkHttpClient();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      Executor callbackExecutor = <span class="keyword">this</span>.callbackExecutor;</div><div class="line">      <span class="keyword">if</span> (callbackExecutor == <span class="keyword">null</span>) &#123;</div><div class="line">        callbackExecutor = platform.defaultCallbackExecutor();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// Make a defensive copy of the adapters and add the default Call adapter.</span></div><div class="line">      List&lt;CallAdapter.Factory&gt; adapterFactories = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.adapterFactories);</div><div class="line">      adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));</div><div class="line"></div><div class="line">      <span class="comment">// Make a defensive copy of the converters.</span></div><div class="line">      List&lt;Converter.Factory&gt; converterFactories = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.converterFactories);</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Retrofit(callFactory, baseUrl, converterFactories, adapterFactories,</div><div class="line">          callbackExecutor, validateEagerly);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从这里可以看出如果我们不设置<code>callFactory</code>，retrofit会默认帮我们new一个OkHttpClient，如果我们不设置<code>callbackExecutor</code>，也会帮我们默认获取到当前平台默认的callbackExecutor，最后new一个Retrofit对象，到这里，Retrofit对象的构建就讲完了。这里有个值得注意的地方：CallAdapter和Converter的工厂集合都使用了保护性拷贝。那么保护性拷贝是什么呢？这是用来保证代码健壮性的。为什么要在这里用？因为Builder的这些配置的方法都是public的，虽然看起来这些是不可变的，但是可以通过传入构造参数来修改引用的值，这就会造成约束条件被破坏，所以使用了保护性拷贝来防止这种情况。</p>
<h2 id="API的编写"><a href="#API的编写" class="headerlink" title="API的编写"></a>API的编写</h2><p>我们已经new好了一个我们需要的Retrofit对象，那么下一步就是编写API了。如何编写API呢？Retrofit的方式是用过java interface和注解的方式进行定义。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitHubService</span> </span>&#123;</div><div class="line">  <span class="meta">@GET</span>(<span class="string">"users/&#123;user&#125;/repos"</span>)</div><div class="line">  Call&lt;List&lt;Repo&gt;&gt; listRepos(<span class="meta">@Path</span>(<span class="string">"user"</span>) String user);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是官方文档上的一个例子。这里简单的定义了一个API，针对这小部分代码，我们来分析分析。<br>首先是GET注解，我们来看看这个注解是什么：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Make a GET request. */</span></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Target</span>(METHOD)</div><div class="line"><span class="meta">@Retention</span>(RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GET &#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * A relative or absolute path, or full URL of the endpoint. This value is optional if the first</div><div class="line">   * parameter of the method is annotated with &#123;<span class="doctag">@link</span> Url <span class="doctag">@Url</span>&#125;.</div><div class="line">   * &lt;p&gt;</div><div class="line">   * See &#123;<span class="doctag">@linkplain</span> retrofit2.Retrofit.Builder#baseUrl(HttpUrl) base URL&#125; for details of how</div><div class="line">   * this is resolved against a base URL to create the full endpoint URL.</div><div class="line">   */</div><div class="line">  <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一个运行时的方法注解，用来构造get请求，唯一的参数是一个string值，默认是空字符串。那么我们可以理解了，<code>@GET(xxxxx)</code>就是构造了一个用于get请求的url。下一个注解是Path注解，是一个运行时的参数注解，它是为了方便我们构建动态的url，参数是一个string值，还可以设置参数是否已经是URL encode编码，默认是false。最后我们看到，通过<code>Call&lt;T&gt;</code>构建成一个interface。<code>Call&lt;T&gt;</code>这个接口分别在<code>OkHttpCall</code>和<code>ExecutorCallbackCall</code>中做了具体的实现。</p>
<h2 id="创建retrofit-service"><a href="#创建retrofit-service" class="headerlink" title="创建retrofit service"></a>创建retrofit service</h2><p>最最关键的一步来了。我们new好了retrofit对象，也写好了API interface，那怎么请求这个API呢，我们需要通过retrofit的<code>create</code>函数，创建一个service，然后调用API的接口方法进行请求并获得回传。使用当然很简单：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GitHubService service = retrofit.create(GitHubService.class);</div></pre></td></tr></table></figure>
<p>是的你没有看错，就这么一句话就搞定了。具体是怎么实现的呢？我们先来看看create的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="comment">// Single-interface proxy creation guarded by parameter safety.</span></div><div class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(<span class="keyword">final</span> Class&lt;T&gt; service)</span> </span>&#123;</div><div class="line">    Utils.validateServiceInterface(service);</div><div class="line">    <span class="keyword">if</span> (validateEagerly) &#123;</div><div class="line">      eagerlyValidateMethods(service);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[] &#123; service &#125;,</div><div class="line">        <span class="keyword">new</span> InvocationHandler() &#123;</div><div class="line">          <span class="keyword">private</span> <span class="keyword">final</span> Platform platform = Platform.get();</div><div class="line"></div><div class="line">          <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object... args)</span></span></div><div class="line">              <span class="keyword">throws</span> Throwable &#123;</div><div class="line">            <span class="comment">// If the method is a method from Object then defer to normal invocation.</span></div><div class="line">            <span class="keyword">if</span> (method.getDeclaringClass() == Object.class) &#123;</div><div class="line">              <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (platform.isDefaultMethod(method)) &#123;</div><div class="line">              <span class="keyword">return</span> platform.invokeDefaultMethod(method, service, proxy, args);</div><div class="line">            &#125;</div><div class="line">            ServiceMethod serviceMethod = loadServiceMethod(method);</div><div class="line">            OkHttpCall okHttpCall = <span class="keyword">new</span> OkHttpCall&lt;&gt;(serviceMethod, args);</div><div class="line">            <span class="keyword">return</span> serviceMethod.callAdapter.adapt(okHttpCall);</div><div class="line">          &#125;</div><div class="line">        &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这里实现的非常巧妙，使用了java的动态代理。什么是动态代理？就是代理类、委托类都要实现同一个接口，然后代理通过接口代理委托类。由于java的单继承特性，所以动态代理是基于接口的，只能针对接口创建代理类。所以这里create的时候，先判断了一下传进来的service是不是interface，如果不是接口类型或者包含多个接口，就会直接抛异常。然后就是重头戏：动态代理的invoke方法。这个方法是<code>InvocationHandler</code>接口中唯一的方法，这个接口是代理实例实现的接口。代理实例调用方法时，<code>InvocationHandler</code>接口会将对方法的调用指派到代理的invoke方法中，进行处理。这里当method是一个对象的method时，直接调用。如果是平台的默认方法（根据Platform代码中这种情况是java8）就直接执行调用默认方法。正常在android平台下，会把method加载到<code>ServiceMethod</code>对象中，这里用了缓存，如果缓存中有<code>SeriveMethod</code>就直接取出，如果没有接new一个，然后用过<code>ServiceMethod</code>初始化了一个<code>OkHttpCall</code>对象，最后通过<code>callAdapter</code>的<code>adapt</code>方法返回一个代理了<code>Call</code>的实例。这个方法在这两个类中有具体的实现：<br><code>DefaultCallAdapterFactory</code>和<code>ExecutorCallAdapterFactory</code>。这两个工厂类又在哪里会用到？就在Retrofit对象的build方法中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Make a defensive copy of the adapters and add the default Call adapter.</span></div><div class="line">      List&lt;CallAdapter.Factory&gt; adapterFactories = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.adapterFactories);</div><div class="line">      adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));</div></pre></td></tr></table></figure>
<p>那我们再看看<code>platform.defaultCallAdapterFactory(callbackExecutor)</code>里是什么：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CallAdapter.<span class="function">Factory <span class="title">defaultCallAdapterFactory</span><span class="params">(Executor callbackExecutor)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (callbackExecutor != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ExecutorCallAdapterFactory(callbackExecutor);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> DefaultCallAdapterFactory.INSTANCE;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>可以看到如果在创建Retrofit对象时<code>callbackExecutor</code>为空的话，就new一个<code>ExecutorCallAdapterFactory</code>对象作为CallAdapter，如果不为空就返回<code>DefaultCallAdapterFactory</code>的实例。</p>
<h2 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h2><p>这里我们按照retrofit官方文档中的例子构建Retrofit对象。<br>retrofit2中，同步和异步不再用interface的定义区分，统一都为<code>Call&lt;T&gt;</code>，但是在Call接口的方法中有区分，我们来看看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Synchronously send the request and return its response.</div><div class="line">   *</div><div class="line">   * <span class="doctag">@throws</span> IOException if a problem occurred talking to the server.</div><div class="line">   * <span class="doctag">@throws</span> RuntimeException (and subclasses) if an unexpected error occurs creating the request</div><div class="line">   * or decoding the response.</div><div class="line">   */</div><div class="line">  <span class="function">Response&lt;T&gt; <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Asynchronously send the request and notify &#123;<span class="doctag">@code</span> callback&#125; of its response or if an error</div><div class="line">   * occurred talking to the server, creating the request, or processing the response.</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Callback&lt;T&gt; callback)</span></span>;</div></pre></td></tr></table></figure>
<p><code>execute()</code>是同步请求，<code>enqueue()</code>是异步请求。我们先看异步请求是如何实现的。enqueue这个方法在以下两个地方有实现：<br><code>OkHttpCall</code>和<code>ExecutorCallbackCall</code>。那么当发起了异步请求之后，就会调用<code>ExecutorCallbackCall</code>中的<code>enqueue</code>方法，<code>ExecutorCallbackCall</code>中一个对象叫</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Call&lt;T&gt; delegate;</div></pre></td></tr></table></figure>
<p>这就是代理的Call对象，在这里就是我们在动态代理<code>create</code>方法中用过<code>ServiceMethod</code>对象构造的<code>OkHttpCall</code>对象，那么这里调用的enqueue方法，就是调用了代理的OkHttpCall对象的enqueue方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">final</span> Callback&lt;T&gt; callback)</span> </span>&#123;</div><div class="line">    ... <span class="comment">//各种判空等代码，这里先省略了</span></div><div class="line"></div><div class="line">    okhttp3.Call call;</div><div class="line">    Throwable failure;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (canceled) &#123;</div><div class="line">      call.cancel();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    call.enqueue(<span class="keyword">new</span> okhttp3.Callback() &#123;</div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(okhttp3.Call call, okhttp3.Response rawResponse)</span></span></div><div class="line">          <span class="keyword">throws</span> IOException &#123;</div><div class="line">        Response&lt;T&gt; response;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          response = parseResponse(rawResponse);</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">          callFailure(e);</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        callSuccess(response);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(okhttp3.Call call, IOException e)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          callback.onFailure(OkHttpCall.<span class="keyword">this</span>, e);</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">          t.printStackTrace();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callFailure</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          callback.onFailure(OkHttpCall.<span class="keyword">this</span>, e);</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">          t.printStackTrace();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callSuccess</span><span class="params">(Response&lt;T&gt; response)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          callback.onResponse(OkHttpCall.<span class="keyword">this</span>, response);</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">          t.printStackTrace();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>可以看到，这里其实是用了okhttp3的请求回调，做了一层封装，变成了retrofit2的Callback，也可以看出retrofit2和okhttp3是深度集成的。到这里，异步请求就一目了然了。我们还可以发现，retrofit2支持的可以取消请求，其实用的就是okhttp3的cancel方法。</p>
<p>同理，同步请求也是一样的，也是调用了代理的OkHttpCall的方法，只不过是<code>execute</code>方法，这个方法里面没有回调，和异步不同，是直接返回解析好的Response对象的，这就是同步请求啦。</p>
<p>至此，顺着<strong>构建请求对象→构建请求接口→发起同步/异步请求</strong>这个流程，我们分析了一遍retrofit2到底是如何实现的。</p>
<h2 id="最后再说几句"><a href="#最后再说几句" class="headerlink" title="最后再说几句"></a>最后再说几句</h2><ul>
<li>retrofit2主模块源码其实并不是很多，我感觉用的最巧妙的就是<code>create</code>方法的动态代理，然后加上运行时注解来构建API，深度结合okhttp3，使得网络请求的构建变得非常简洁，并且功能强大，而且安全。</li>
<li>retrofit2同时支持与rxjava配合使用，是通过设置adapter来实现的，retrofit2把adapters和converters从主代码里拆分出来了，相当于组件化的意思，如果需要使用，就由开发者自己引用并定义，这种组件化的思想我觉得也非常棒。</li>
<li>retrofit2源码里是通过junit来写测试的，测试代码写的也非常好，更说明了优秀的代码离不开优秀的测试，这也是值得我们学习的地方。</li>
</ul>
<p>这是我第一次自己去分析一个开源项目的源码，也许可能会有遗漏的地方，望指出，抛砖引玉，谢谢~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请注明出处：&lt;a href=&quot;http://richardcao.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://richardcao.me/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文将顺着&lt;strong&gt;构建请求对象→
    
    </summary>
    
      <category term="源码分析" scheme="http://richard-cao.github.io/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="retrofit" scheme="http://richard-cao.github.io/tags/retrofit/"/>
    
  </entry>
  
  <entry>
    <title>React-Native-APP-With-Testing</title>
    <link href="http://richard-cao.github.io/2016/05/28/React-Native-APP-With-Testing/"/>
    <id>http://richard-cao.github.io/2016/05/28/React-Native-APP-With-Testing/</id>
    <published>2016-05-28T23:53:25.000Z</published>
    <updated>2016-07-30T04:43:26.209Z</updated>
    
    <content type="html"><![CDATA[<p>转载请注明出处：<a href="http://richardcao.me/" target="_blank" rel="external">http://richardcao.me/</a></p>
<p>这两天，我尝试了一下在开发react-native app的过程中如何去组建一套比较容易理解和使用的测试框架进行UT和component UT，这里做一下整理。<br>PS：最终代码在reading项目中, <a href="https://github.com/attentiveness/reading" target="_blank" rel="external">欢迎关注</a>。</p>
<h2 id="为何要尝试UT"><a href="#为何要尝试UT" class="headerlink" title="为何要尝试UT"></a>为何要尝试UT</h2><p>其实我接触UT部分，也就是这两天。如今很多人都知道TDD的开发模式，由测试来驱动开发，优秀的代码是离不开优秀的测试的。在产品快速迭代的过程中，我们很容易忽略测试这一重要的环节，目前公司里我负责的app正好就处在这个状态。很多问题是测试很难测出来的，尤其在资源紧张的情况下，我认为，需要研发工程师使用UT来尽可能保证质量，并且在已有的功能重构和回归方面，通过各种工具手段来减少测试资源的占用。</p>
<p>注：本文只谈react-native app的测试。在对蜂鸟众包app中react-native部分添加UT之前，我使用了reading项目先进行一些了解和踩坑。</p>
<h2 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h2><p>我对js方面的测试框架不太了解，对react-native相关的就更不了解了。<a href="https://facebook.github.io/jest/" target="_blank" rel="external">Jest</a>这个框架是我看到react-native源码中有使用，所以按照react-native源码中的配置，我进行了尝试。具体细节在reading的<a href="https://github.com/attentiveness/reading/commit/b38b3f325ec504bf41971f2085311ac7b56ef9c9" target="_blank" rel="external">try jest</a>这次提交中，整个配置我也是各种尝试，因为引用react-native作为框架开发的项目毕竟和依赖react-native源码中测试的配置部分有不少不同的地方，经过各种尝试，我按照fb的方式跑起来了一个测试用例，感觉对我来说有点晦涩……Jest我看了下是个挺全面的框架，包括断言、mock等部分，而且在做component UT的时候，我感觉有些麻烦，用到了好多react-dom的东西。也许是博大精深我不太会用，之前也没有怎么了解过这个，就想寻求一种相对更简单交互更好的方式。</p>
<h2 id="Mocha-amp-Enzyme-amp-Chai"><a href="#Mocha-amp-Enzyme-amp-Chai" class="headerlink" title="Mocha &amp; Enzyme &amp; Chai"></a>Mocha &amp; Enzyme &amp; Chai</h2><p><a href="https://mochajs.org/" target="_blank" rel="external">Mocha</a>是我之前有稍微看过一下下的（其实就是看过官方主页），感觉很简洁，很方便的样子。<a href="http://chaijs.com/" target="_blank" rel="external">Chai</a>是一个很简洁的断言库，可以和Mocha结合做非UI代码的UT。关于react-native component UI部分的UT，我发现用<a href="https://github.com/airbnb/enzyme" target="_blank" rel="external">Enzyme</a>的很多，这是airbnb开源出来的一个react的js测试库，可以结合Mocha，同时可以结合react-native一起用，看起来也挺简洁的，所以我就想把这三个结合到一起用。下面就详细讲一下这种方式吧，以reading项目为例。</p>
<p>这里我在写测试代码的时候，为了和项目代码保持一致，统一采用ES6.</p>
<h3 id="首先需要安装以下依赖"><a href="#首先需要安装以下依赖" class="headerlink" title="首先需要安装以下依赖"></a>首先需要安装以下依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i babel-core babel-preset-es2015 babel-preset-react-native chai enzyme mocha react-addons-test-utils react-dom react-native-mock --save-dev</div></pre></td></tr></table></figure>
<h3 id="添加-babelrc文件"><a href="#添加-babelrc文件" class="headerlink" title="添加.babelrc文件"></a>添加.babelrc文件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"react-native"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="配置测试脚本"><a href="#配置测试脚本" class="headerlink" title="配置测试脚本"></a>配置测试脚本</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">		<span class="attr">...</span></div><div class="line">    <span class="string">"test"</span>: <span class="string">"mocha --require react-native-mock/mock.js --compilers js:babel-core/register --recursive your_app/**/*/*.spec.js"</span></div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<p>这种配置路径<code>your_app/**/*/*.spec.js&quot;</code>是表示在app目录下的两层目录下后缀为<code>.spec.js</code>的均为测试代码，这是根据我reading的路径来走的，你可以根据你自己项目的具体路径来配置。</p>
<h3 id="编写第一个测试代码"><a href="#编写第一个测试代码" class="headerlink" title="编写第一个测试代码"></a>编写第一个测试代码</h3><p>这里我第一个写的非常简单的测试用例是给reading中<code>Button</code>组件写的，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;View, Text, StyleSheet&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> &#123;shallow&#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</div><div class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</div><div class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">'../Button'</span>;</div><div class="line"></div><div class="line">describe(<span class="string">'&lt;Button /&gt;'</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'it should render 1 Text component'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> wrapper = shallow(<span class="xml"><span class="tag">&lt;<span class="name">Button</span> /&gt;</span>);</span></div><div class="line">    expect(wrapper.find(Text)).to.have.length(1);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里例子非常简单了，其实就是检测一下<code>Button</code>这个组件中是否渲染了一个<code>Text</code>组件。然后执行脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="built_in">test</span></div></pre></td></tr></table></figure>
<p>你就会看到非常人性化的输出了：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">~<span class="regexp">/workspace/</span>reading  master ✔                                                                                <span class="number">23</span>h37m</div><div class="line">▶ npm test</div><div class="line"></div><div class="line">&gt; reading@<span class="number">0.1</span>.<span class="number">5</span>-rc test <span class="regexp">/Users/</span>richardcao<span class="regexp">/workspace/</span>reading</div><div class="line">&gt; mocha --require react-<span class="keyword">native</span>-mock<span class="regexp">/mock.js --compilers js:babel-core/</span>register --recursive app<span class="comment">/**/</span>*<span class="comment">/*.spec.js</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  &lt;Button /&gt;</div><div class="line">    ✓ it should render 1 Text component</div><div class="line"></div><div class="line"></div><div class="line">  1 passing (393ms)</div></pre></td></tr></table></figure>
<p>到这里，本文就结束了。关于TDD和自动化测试这部分，我基本了解的也不多，所以本文也只是针对入门级想尝试对react-native做UI的同学参考。</p>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>首先，我是一个连测试用例都不会写的菜鸡，但是我一直觉得开发写UT是挺有必要的，也是结合我目前遇到的情况总结出来的，慢慢的我会学一些自动化测试相关的内容，从reading开始，尽量慢慢向TDD模式转化，也会在公司内部用起来。抛砖引玉，有什么好想法的同学，欢迎交流。</p>
<p>本文相关详细代码请看<a href="https://github.com/attentiveness/reading" target="_blank" rel="external">reading项目</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请注明出处：&lt;a href=&quot;http://richardcao.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://richardcao.me/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这两天，我尝试了一下在开发react-native app的过程中
    
    </summary>
    
      <category term="testing" scheme="http://richard-cao.github.io/categories/testing/"/>
    
    
      <category term="react-native" scheme="http://richard-cao.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>React-Native蜂鸟实践</title>
    <link href="http://richard-cao.github.io/2016/03/30/React-Native%E8%9C%82%E9%B8%9F%E5%AE%9E%E8%B7%B5/"/>
    <id>http://richard-cao.github.io/2016/03/30/React-Native蜂鸟实践/</id>
    <published>2016-03-30T10:31:42.000Z</published>
    <updated>2016-07-30T04:43:26.209Z</updated>
    
    <content type="html"><![CDATA[<p>转载请注明出处：<a href="http://richardcao.me/" target="_blank" rel="external">http://richardcao.me/</a></p>
<p>昨晚有幸和返利网技术团队做了React-Native相关的技术交流与分享，今天把Keynote毫无保留的分享给大家，不多说，直接上干货！</p>
<p><img src="http://7xr0xq.com1.z0.glb.clouddn.com/React-Native%E8%9C%82%E9%B8%9F%E5%AE%9E%E8%B7%B5.001.jpeg" alt="React-Native蜂鸟实践.001"><br><img src="http://7xr0xq.com1.z0.glb.clouddn.com/React-Native%E8%9C%82%E9%B8%9F%E5%AE%9E%E8%B7%B5.002.jpeg" alt="React-Native蜂鸟实践.002"><br><img src="http://7xr0xq.com1.z0.glb.clouddn.com/React-Native%E8%9C%82%E9%B8%9F%E5%AE%9E%E8%B7%B5.003.jpeg" alt="React-Native蜂鸟实践.003"><br><img src="http://7xr0xq.com1.z0.glb.clouddn.com/React-Native%E8%9C%82%E9%B8%9F%E5%AE%9E%E8%B7%B5.004.jpeg" alt="React-Native蜂鸟实践.004"><br><img src="http://7xr0xq.com1.z0.glb.clouddn.com/React-Native%E8%9C%82%E9%B8%9F%E5%AE%9E%E8%B7%B5.005.jpeg" alt="React-Native蜂鸟实践.005"><br><img src="http://7xr0xq.com1.z0.glb.clouddn.com/React-Native%E8%9C%82%E9%B8%9F%E5%AE%9E%E8%B7%B5.006.jpeg" alt="React-Native蜂鸟实践.006"><br><img src="http://7xr0xq.com1.z0.glb.clouddn.com/React-Native%E8%9C%82%E9%B8%9F%E5%AE%9E%E8%B7%B5.007.jpeg" alt="React-Native蜂鸟实践.007"><br><img src="http://7xr0xq.com1.z0.glb.clouddn.com/React-Native%E8%9C%82%E9%B8%9F%E5%AE%9E%E8%B7%B5.008.jpeg" alt="React-Native蜂鸟实践.008"><br><img src="http://7xr0xq.com1.z0.glb.clouddn.com/React-Native%E8%9C%82%E9%B8%9F%E5%AE%9E%E8%B7%B5.009.jpeg" alt="React-Native蜂鸟实践.009"></p>
<p>谢谢大家！如果想与我交流，可以直接加我微信，二维码在blog里。<br><a href="https://github.com/attentiveness/reading" target="_blank" rel="external">Reading项目</a>，是我在做的一个React-Native开源app，非常适合想学习React-Native Redux的朋友。我是很用心的哦，欢迎大家关注！<br>最后附上一张我在返利网其中一个办公楼的门口拍的照片……<br><img src="http://7xr0xq.com1.z0.glb.clouddn.com/fanli.com.jpg" alt="fanli.com"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请注明出处：&lt;a href=&quot;http://richardcao.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://richardcao.me/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;昨晚有幸和返利网技术团队做了React-Native相关的技术交流
    
    </summary>
    
      <category term="hybrid" scheme="http://richard-cao.github.io/categories/hybrid/"/>
    
    
      <category term="react-native" scheme="http://richard-cao.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>Reading App Write In React-Native</title>
    <link href="http://richard-cao.github.io/2016/02/06/Reading-App-Write-In-React-Native/"/>
    <id>http://richard-cao.github.io/2016/02/06/Reading-App-Write-In-React-Native/</id>
    <published>2016-02-06T14:56:57.000Z</published>
    <updated>2016-07-30T04:43:26.209Z</updated>
    
    <content type="html"><![CDATA[<p>转载请注明出处：<a href="http://richardcao.me/" target="_blank" rel="external">http://richardcao.me/</a></p>
<p><strong>reading项目开源地址：<a href="https://github.com/attentiveness/reading" target="_blank" rel="external">https://github.com/attentiveness/reading</a></strong></p>
<h2 id="Reading-App-Write-In-React-Native"><a href="#Reading-App-Write-In-React-Native" class="headerlink" title="Reading App Write In React-Native"></a>Reading App Write In React-Native</h2><blockquote>
<p>No Profit, No Advertisement, Only Feelings</p>
</blockquote>
<p>这是一个产品级的开源项目（请允许我这么说）。</p>
<h2 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h2><p>打开我的git log看了看，创建reading项目的时间是<strong>2015年12月11日上午1:00</strong>，我依然记得那时候我的初衷是想做一个react-native为主导开发的APP。从刚开始学js到做公司android项目中react-native模块的开发还不到一个月，我想，能否用react-native为主导开发一个自己的APP来慢慢学习呢？于是我就init了reading项目放到了我的github上，还专门建了一个organization叫<a href="https://github.com/attentiveness" target="_blank" rel="external">attentiveness</a>，愉快的装了一逼。但是到<strong>2015年12月13日下午3:15</strong>的时候，我更新了一发commit就暂停了。因为当时我还不知道应该怎么去写代码，我都不知道js的代码规范是怎么样的，我也不知道做reading到底需要做什么需求，在迷茫之中，我停止了reading项目的开发。</p>
<h2 id="Restart"><a href="#Restart" class="headerlink" title="Restart"></a>Restart</h2><p>当我重启reading项目的时候，记录显示时间是<strong>2016年1月25日上午1:24</strong>。为什么重启reading项目？其实很简单，之前搁置的原因就是我不知道到底要做什么需求，到底应该如何去做，也不知道代码怎样去写。截止16年1月25日的时候，正好是我做公司的react-native项目刚满一个月的日子，我已经知道了如何去写代码，如何去做一个项目，所以我重启了reading项目。需求哪里来？我的一个小伙伴想做产品经理，但是他以前根本没有经验，那就一起学。需求就这么来了，于是我们就说干就干了。</p>
<h2 id="0-1-2"><a href="#0-1-2" class="headerlink" title="0.1.2"></a>0.1.2</h2><p><strong>0.1.2是Reading app发布市场的第一个版本</strong>。为什么是0.1.2？因为0.1.1是reading的内测版本，内测平台我选择了<a href="http://www.pgyer.com/" target="_blank" rel="external">蒲公英</a>。说实话，这是我第一次打react-native开发的app的release包，第一次把一个自己认为称得上是<code>项目</code>的app发布到了应用市场。</p>
<blockquote>
<ul>
<li>360市场下载地址：<a href="http://zhushou.360.cn/detail/index/soft_id/3217938?recrefer=SE_D_Reading" target="_blank" rel="external">Download Reading</a></li>
<li>豌豆荚下载地址：<a href="http://www.wandoujia.com/apps/com.reading" target="_blank" rel="external">Download Reading</a></li>
</ul>
</blockquote>
<h2 id="React-Native-Android类似弹窗效果的实现"><a href="#React-Native-Android类似弹窗效果的实现" class="headerlink" title="React-Native Android类似弹窗效果的实现"></a>React-Native Android类似弹窗效果的实现</h2><p>在react-native ios中，可以用<a href="https://facebook.github.io/react-native/docs/modal.html#content" target="_blank" rel="external">Modal</a>组件实现这个效果，但是官方文档中明确注明了这个组件是</p>
<blockquote>
<p>This component is only available in iOS at this time.</p>
</blockquote>
<p>OK，那android怎么办？从官方的<a href="https://facebook.github.io/react-native/docs/known-issues.html#content" target="_blank" rel="external">Known Issues</a>中可以看到，官方有让Modal组件支持android的计划，但是这个版本是没有的，现在最新版本<a href="https://github.com/facebook/react-native/releases" target="_blank" rel="external">0.19.0的release note</a>中也是没有的，但是reading app要上线第一个版本，就必须实现分享的弹窗。当时考虑有两种方案：<code>dialog</code>和<code>spinner</code>。官方组件是有dialog的，这个组件是<a href="https://facebook.github.io/react-native/docs/alert.html#content" target="_blank" rel="external">Alert</a>，但是这个组件并不支持自定义UI，只是固定的样式模板，那么无法实现我这个需求。<code>spinner</code>组件官方还没支持，并且明确了以后会支持，所以我想到了能不能有android可以使用的类似Modal的组件呢？于是我找来找去，还真有，官方文档中并未提及，这个组件的名字叫<a href="https://github.com/facebook/react-native/blob/master/Libraries/Portal/Portal.js" target="_blank" rel="external">Portal</a>。组件找到就好办了，于是我开始动手实现。</p>
<p>首先引入Portal：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Portal <span class="keyword">from</span> <span class="string">'react-native/Libraries/Portal/Portal.js'</span>;</div></pre></td></tr></table></figure>
<p>引入之后，我看了下Portal，使用起来也挺简单，虽然没有文档，但是可以看到，我能用到的有这么几个方法</p>
<blockquote>
<ul>
<li>allocateTag</li>
<li>showModal</li>
<li>closeModal</li>
<li>getOpenModals</li>
</ul>
</blockquote>
<p>那么就简单了，引入之后我需要</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">componentWillMount() &#123;</div><div class="line">    <span class="keyword">if</span> (Platform.OS === <span class="string">'android'</span>) &#123;</div><div class="line">      <span class="built_in">tag</span> = <span class="keyword">Portal</span>.allocateTag();</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>拿到<code>tag</code>之后</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">onActionSelected</span>() &#123;</div><div class="line">    Portal<span class="selector-class">.showModal</span>(tag, this.renderSpinner());</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这里的<code>onActionSelected</code>是<a href="https://facebook.github.io/react-native/docs/toolbarandroid.html#content" target="_blank" rel="external">ToolbarAndroid</a>的一个属性，可以触发点击action的事件，我的分享按钮就在右上角，那么点击之后，分享的弹窗就出现了。</p>
<p>那么如何关闭？我这里做的比较简单，是这样的</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">goBack() &#123;</div><div class="line">    <span class="keyword">if</span> (Portal.getOpenModals().length != <span class="number">0</span>) &#123;</div><div class="line">      Portal.closeModal(tag);</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (canGoBack) &#123;</div><div class="line">      <span class="keyword">this</span>.refs.webview.goBack();</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> NaviGoBack(<span class="keyword">this</span>.props.navigator);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">componentDidMount</span>() &#123;</div><div class="line">    BackAndroid<span class="selector-class">.addEventListener</span>(<span class="string">'hardwareBackPress'</span>, this.goBack);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-tag">componentWillUnmount</span>() &#123;</div><div class="line">    BackAndroid<span class="selector-class">.removeEventListener</span>(<span class="string">'hardwareBackPress'</span>, this.goBack);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这个UI怎么像是一个弹窗呢？其实技巧就在于背景颜色上面。我的分享View是居中的，背景颜色我用了rgba设置了透明度，就像是这样</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">backgroundColor:</span> <span class="string">'rgba(0, 0, 0, 0.65)'</span></div></pre></td></tr></table></figure>
<p>那么就非常像一个弹窗啦~具体效果可以看<a href="https://github.com/attentiveness/reading/blob/master/screenshot/Reading_Share.jpg" target="_blank" rel="external">这里</a></p>
<h2 id="Release-Note与线上事故复盘"><a href="#Release-Note与线上事故复盘" class="headerlink" title="Release Note与线上事故复盘"></a>Release Note与线上事故复盘</h2><p>针对这部分，我也在项目中专门写了这两个文档，具体可以看</p>
<blockquote>
<ul>
<li><a href="https://github.com/attentiveness/reading/releases" target="_blank" rel="external">Reading Release Note</a></li>
<li><a href="https://github.com/attentiveness/reading/blob/master/Reading_OnLine_Accident.md" target="_blank" rel="external">Release线上事故复盘</a></li>
</ul>
</blockquote>
<p>文档会根据实际情况保持更新，这是reading自己的积累。</p>
<h2 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h2><p>git工作流我就不在这里赘述了，大家可以参照<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external">A successful Git branching model</a>。</p>
<p>在0.1.3版本上线之后，我们发现我们需要开发流程，之前流程的不规范导致我们工作效率不高并且容易遗漏很多东西，所以我采用了最简单的敏捷开发流程，我们使用<a href="https://tower.im/" target="_blank" rel="external">Tower</a>进行协同，为什么选择Tower？</p>
<blockquote>
<ul>
<li>与微信绑定，使用方便</li>
<li>有敏捷开发板，可以构建简易的敏捷开发，防止需求遗漏，还可以进行问题讨论等，管理非常方便，也是现在reading正需要的</li>
<li>没有多余的冗杂功能，reading现在还很小，这就足够了，简约而不简单</li>
</ul>
</blockquote>
<p>这是我们目前的Reading敏捷开发板展示，可以看到我们已经在计划做0.1.4版本的需求了</p>
<p><img src="http://7xr0xq.com1.z0.glb.clouddn.com/Reading%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E5%B1%95%E7%A4%BA.jpg" alt="Reading敏捷开发展示"></p>
<h2 id="最后再说几句"><a href="#最后再说几句" class="headerlink" title="最后再说几句"></a>最后再说几句</h2><p>欢迎大家<a href="https://github.com/attentiveness/reading" target="_blank" rel="external">star，fork，pr，issue</a>，和reading、和我们一起成长~</p>
<p>目前只发布了360市场和豌豆荚，360市场审核快一些，apk版本更新之后我会及时发布市场提交审核的，当然reading中也是有自己的热更新哒，react-native你懂得。针对reading项目我采用的<strong>热更新方案</strong>是<a href="https://github.com/Microsoft/react-native-code-push" target="_blank" rel="external">Microsoft/react-native-code-push</a>，因为reading是没有后端的，所以code-push项目完美的帮我解决了热更新的jsbundle版本管理发布问题。</p>
<p><strong>目前Reading线上只有android版本，功能稳定之后我会做ios的兼容，并且有发布到AppStore的计划。</strong></p>
<p><strong>Reading会持续更新下去的，希望能得到大家的支持和鼓励。你们的鼓励是我们前进的动力！</strong></p>
<p><img src="http://7xr0xq.com1.z0.glb.clouddn.com/reading_in_react-native_showcase.jpg" alt="Reading in Facebook react-native showcase"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请注明出处：&lt;a href=&quot;http://richardcao.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://richardcao.me/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;reading项目开源地址：&lt;a href=&quot;ht
    
    </summary>
    
      <category term="open source" scheme="http://richard-cao.github.io/categories/open-source/"/>
    
    
      <category term="react-native" scheme="http://richard-cao.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>逝去的2015</title>
    <link href="http://richard-cao.github.io/2016/01/17/%E9%80%9D%E5%8E%BB%E7%9A%842015/"/>
    <id>http://richard-cao.github.io/2016/01/17/逝去的2015/</id>
    <published>2016-01-17T02:16:27.000Z</published>
    <updated>2016-07-30T04:43:26.213Z</updated>
    
    <content type="html"><![CDATA[<p>转载请注明出处：<a href="http://richardcao.me/" target="_blank" rel="external">http://richardcao.me/</a></p>
<p>2015这一年，我从学校走进了社会，基本完成了从学生到职场人士的转型，想想感觉自己都老了。</p>
<blockquote>
<p>这一年感悟很多，经历了很多事，一路走来，也是充满了坎坷。收获良多，写下随笔。生活不只是眼前的苟且，还有诗和远方。</p>
</blockquote>
<p>随笔大概包括这几部分内容：</p>
<blockquote>
<ul>
<li>学校的大四生活</li>
<li>坚持了四年至今仍在继续的爱情长跑</li>
<li>初入职场这半年的人和事</li>
<li>最后再说几句</li>
</ul>
</blockquote>
<h2 id="学校的大四生活"><a href="#学校的大四生活" class="headerlink" title="学校的大四生活"></a>学校的大四生活</h2><p>大四虽然课少了，但是心里想的事情就不只是课程和学校的事情了，说大四是大学四年最愁的一年完全不为过。还记得大四的时候，我和同学在一个坑爹的小地方给人家写代码，一个月挣1500糊口，也就2个月就逃出来了。那时候大家考研的考研，工作的已经去实习了，我真是要什么没什么。本来想考研，报了班，学了一个暑假发现还是不会做题，我确实是不适合啃书本的人。于是不顾家里反对，偷偷自己做自己想做的事情。从大三开始自己搞搞Android app开发，当时只是感兴趣，从刷机开始，慢慢做了apk美化，结果就想知道app是如何开发出来的，就开始摸索着做了。刚开始就报名参加了一个比赛，记得还是一个全国性的比赛，当时真心是搭个Android开发环境都要三天，都是从网上copy的代码，堆了一个能吹一吹和摇一摇的玩意就去参赛了……那时候我都不知道比赛是怎么个意思，也没报什么希望。平平淡淡了过了一个月之后，学校老师突然打电话给我说，我做的那个玩意得了全国三等奖……我直接就兴奋了，觉得自己很厉害，新手还能拿全国奖，那时候真是自信心爆棚，仿佛感觉什么app都能写出来的样子~之后又参加了一个比赛，还都是我带队，也拿了奖，给学校争了光。</p>
<p><strong>真心感觉喜欢做一件事，在有兴趣支撑的同时，还需要有成就感来推动自己更努力的学习。</strong></p>
<p>之后仿佛就感觉有点顺理成章的样子，我果然没考研，继续做了Android，跟着一个对我很好的导师做一个国家级的项目，陆陆续续加上毕设一共做了1年，最后顺利结项，确实学到了很多东西，收获很多，也是我对自己大学最满意的一件事情了。毕设是团队毕设，我带队，这是我最满意的一次带队，每个人都很努力，我们也做出了很不错的成果，大概还有两三个国家发明专利这样子。大四这一年，不光锻炼了我自己的工程能力，更多的锻炼了我思考问题、与人沟通、项目管理等能力，从思想上算是一次量变积累质变吧，有种整个人升华了一次的感觉~</p>
<p><strong>运气或许也是能力的一部分，能遇到一位对自己有知遇之恩的导师很难得。</strong></p>
<p>有了这些经历，也是我运气好，成功拿到了<a href="https://www.ele.me/home/" target="_blank" rel="external">饿了么</a>上海研发中心的实习offer，在这期间也发生了实习前面阿里被拒，实习后面阿里拿到offer但是没去，说明实习了三个月我真的成长了不少，没去阿里的原因也比较简单，我确实很喜欢饿了么的这种比较open的环境，同事们都很nice，我有问题请教他们，他们都会很耐心的教我。阿里我也很喜欢的，当时拿到的是天猫杭州的offer，面试官给我打了2小时的电话，感觉人真的很nice，现在我还和他保持着联系，有问题也会请教阿里的朋友们，他们都会尽量给我提供帮助，我算是与阿里结下了不解之缘。</p>
<p><strong>身边的朋友很重要，他们给你提供的帮助可以让你少走很多弯路，请珍惜身边的朋友和对你好的人。</strong></p>
<h2 id="坚持了四年至今仍在继续的爱情长跑"><a href="#坚持了四年至今仍在继续的爱情长跑" class="headerlink" title="坚持了四年至今仍在继续的爱情长跑"></a>坚持了四年至今仍在继续的爱情长跑</h2><p>我是从大一谈的妹子，确实蛮早的……军训时候追到的哈哈~和我家妹子一起经历了很多事，从2016年开始就是我们第五年的爱情长跑了，我也相信我们能走到最后。</p>
<p><strong>大学时候谈恋爱，可以让一个男孩子慢慢变得成熟起来，但是好女孩可遇而不可求，遇到了请珍惜。</strong></p>
<p>大一大二，那时候我和我家妹子，可以说三天小吵两天大吵，不吵架都过不去日子的那种……期间分手了起码十几次，搞得最后同学们都不相信我们会分手了，甚至室友都开始拿这个打赌了……两个人在一起需要相互磨合，我和我家妹子磨合的时间其实算比较长的，用了2年时间吧，才慢慢稳定下来，当时两个人都经常犯傻，做了好多啥事，也矫情也作，看来恋爱中女人智商为零，男人智商直接为负了。我做的那些我现在看来很幼稚的事情我都不好意思说……</p>
<p>毕业季分手季，这句话大家都不陌生，但是我和我家妹子跨过了这道坎，走到了现在。我来上海实习工作，她为了和我在一起，也来到了上海工作。对她来说上海是一个陌生的没什么亲人的城市，只是因为我在这里，所以她来了。为了我们以后能生活的更幸福，能在上海有属于我们自己的家，我也要努力奋斗，这给我很大的动力。</p>
<p><strong>恋爱的两个人都要为对方付出，才能走得更远，一旦天平倾斜，那么有可能面临危机。</strong></p>
<p>其实让我这么坚定想娶我家妹子的原因很简单：她用她最美好的青春年华陪伴了我这个一无所有的屌丝，我还有什么理由不对她好呢。这年头，不拜金不物质愿意陪着一个一无所有的人一起打拼的妹子真的很少很少了。我大一大二迷恋玩游戏，<a href="http://lol.qq.com/" target="_blank" rel="external">LOL</a>，成绩挂科好几门，还白天不上课晚上包夜之类的……她也没放弃我，一直想办法让我“改邪归正”，直到大二末我才醒悟过来。这期间她一直在劝我、鼓励我，不顾别人异样的眼光和闲言碎语，我真的太感动。当时没觉得，后来越想越感动，发誓对她好，不辜负她，让我们生活的更幸福，更快乐。</p>
<p><strong>爱情是需要两个人共同经营的，只要真心实意的对对方好，总有办法可以克服困难走下去。</strong></p>
<p>和我家妹子一起的美好回忆太多，每次想起来都有满满的幸福感，我们一起逗比，一起旅行，失落的时候互相安慰，得意的时候一起嘚瑟，一般总是我嘚瑟然后我家妹子敲打我……我们互相鼓励，一起向着美好的未来努力。我们都不笨，我相信我们可以的！</p>
<p><strong>作为一个男人，要有责任感，让自家妹子有安全感，肩上的担子很重但是要顶起来。</strong></p>
<p>最后说一句，如果你遇到了一个像我家妹子这样的妹子，<strong>请珍惜</strong>。</p>
<h2 id="初入职场这半年的人和事"><a href="#初入职场这半年的人和事" class="headerlink" title="初入职场这半年的人和事"></a>初入职场这半年的人和事</h2><p>7月份大学毕业，加上之前实习了三个月表现不错，顺利转正。初入职场的我什么都不懂，到处都需要学习。还好有一群很棒的同事给我提供各种帮助，而且带我的老大<a href="https://github.com/xujinyang" target="_blank" rel="external">jinyang</a>大哥超级赞，他只比我大一岁，感觉和我很像，都是想法比较多的人。在平时工作的时候，他会根据我的兴趣给我分配一些工作任务，不断的锻炼我成长。我喜欢尝试新的挑战，他就把具有挑战性的任务分配给我，而且从不给我什么压力，让我感到很轻松，没有什么太大的压力。从刚转正到现在，我总感觉就算我搞不定的事情，他也能搞定，所以我完全不担心啊哈哈哈。</p>
<p><strong>论一个好leader的重要性。</strong></p>
<p>我们的团队氛围真的很好，没有什么上下级之分，大家都是同事，都是好朋友，一起吃饭一起讲段子嘿嘿嘿，有困难的时候也会互相帮助，一起加班一起发版本，而且也很少和产品经理撕逼……一个月前我们这边Android组新来了一个实习生<a href="https://github.com/lizhaoxuan" target="_blank" rel="external">zhaoxuan</a>，大哥让我带。zhaoxuan很聪明，而且经常问问题，我们经常一起交流，性格也很好，很不错的实习生，学习能力蛮强的，经常能针对问题提出自己的看法。作为一名Android developer，他在UI方面还是蛮有讲究的，自己会私下研究一些东西，自主学习，很有潜力。在带实习生的过程中，间接的对我也是一个锻炼，这也是大哥对我的锻炼。</p>
<p><strong>团队氛围很关键，开心的工作一定是高效率的。</strong></p>
<p>前几天和大哥聊天，他肯定了我这半年的表现，说我<strong>确实表现出色，将才</strong>，很感动。我是一个非常希望通过自己的努力获得肯定的人，我学习能力不弱，想法也不少，我会继续努力让自己变得更强，能承担起更多的责任。对自己要有信心，这也是周围的朋友教会我的道理。人不能妄自菲薄，也不能狂妄自大，要做到<strong>不吹不黑，平心而论</strong>。</p>
<p><strong>只有通过自己的努力才能获得他人的肯定，脚踏实地。</strong></p>
<h2 id="最后再说几句"><a href="#最后再说几句" class="headerlink" title="最后再说几句"></a>最后再说几句</h2><ul>
<li>运气有时候挺关键的，但是自己不努力任何运气都没有。</li>
<li>美好的爱情可遇而不可求，遇到好女孩请珍惜，男人年轻时可以穷，但是要变成熟，要有上进心、责任感、使命感。</li>
<li>互联网公司更看重一个人的潜力，包括沟通能力、学习能力、责任心和人品等等，你现在的能力不能决定你的未来。</li>
<li>正确的认识自己很重要，人贵在有自知之明，摆正自己的位置，挖掘自己的潜力，才能更好更快的向前跑。</li>
</ul>
<p><strong>2016年已经到来，新的一年，继续奋斗，为了美好的未来！不要让身边的人对自己失望。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请注明出处：&lt;a href=&quot;http://richardcao.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://richardcao.me/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2015这一年，我从学校走进了社会，基本完成了从学生到职场人士的转
    
    </summary>
    
      <category term="杂谈" scheme="http://richard-cao.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="2015个人总结" scheme="http://richard-cao.github.io/tags/2015%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>React-Native With Redux</title>
    <link href="http://richard-cao.github.io/2016/01/12/React-Native-With-Redux/"/>
    <id>http://richard-cao.github.io/2016/01/12/React-Native-With-Redux/</id>
    <published>2016-01-12T00:26:21.000Z</published>
    <updated>2016-07-30T04:43:26.209Z</updated>
    
    <content type="html"><![CDATA[<p>转载请注明出处：<a href="http://richardcao.me/" target="_blank" rel="external">http://richardcao.me/</a></p>
<blockquote>
<p>经过上次的react-native小模块完成之后，发现不少缺点，而且基本没什么扩展性。这次正好又增加一个react-native模块————我的等级特权，于是动手重构了项目里整个react-native的部分，随着今晚项目发布上线，动手记录下来这次重构的经验。</p>
</blockquote>
<p>本文目录</p>
<blockquote>
<ul>
<li>为什么要做这次重构</li>
<li>Flux模式与Redux</li>
<li>React-Native With Redux</li>
<li>代码规范和语法糖</li>
<li>重构过程中遇到的坑</li>
<li>总结</li>
</ul>
</blockquote>
<p>撰写本文时笔者的相关环境如下</p>
<blockquote>
<ul>
<li>操作系统：OS X 10.11.2</li>
<li>npm中react-native版本：0.17.0</li>
<li>Android studio中react-native版本：0.17.1</li>
</ul>
</blockquote>
<h2 id="为什么要做这次重构"><a href="#为什么要做这次重构" class="headerlink" title="为什么要做这次重构"></a>为什么要做这次重构</h2><p>之前的初次踩坑文章是在做第一个react-native需求——通知中心的时候写的，当时为的是功能没问题然后上线，并没有考虑扩展、封装、数据流等问题。当又要添加其他react-native模块的时候，就必须要解决这样的问题了，于是这次重构应运而生。</p>
<h2 id="Flux模式与Redux"><a href="#Flux模式与Redux" class="headerlink" title="Flux模式与Redux"></a>Flux模式与Redux</h2><h3 id="Flux模式"><a href="#Flux模式" class="headerlink" title="Flux模式"></a>Flux模式</h3><p>首先，我们知道，react-native根据什么render UI呢？答案就是state和props。那么可以预料到，当模块增多、代码量增加的话，如果没有一套数据流规范，那么就会遇到state或props不统一导致刷新错乱等问题。react是遵循Flux架构的，那么什么是Flux呢？这里我们看一张图：<br><img src="http://cdn4.infoqstatic.com/statics_s1_20160105-0313u5/resource/news/2014/05/facebook-mvc-flux/zh/resources/0519001.png" alt="Flux"><br>Store包含了应用的所有数据，Dispatcher替换了原来的Controller，当Action触发时，决定了Store如何更新。当Store变化后，View同时被更新，还可以生成一个由Dispatcher处理的Action。这确保了数据在系统组件间单向流动。当系统有多个Store和View时，仍可视为只有一个Store和一个View，因为数据只朝一个方向流动，并且不同的Store和View之间不会直接影响彼此。(这段话引用自<a href="http://www.infoq.com/cn/news/2014/05/facebook-mvc-flux" target="_blank" rel="external"><br>Facebook：MVC不适合大规模应用，改用Flux</a>)</p>
<h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>那么Redux是什么呢？Redux是javascript状态容器，提供可预测化的状态管理，可以构建一致化的应用，除了和React一起用外，还支持其他界面库，体积小（只有2kb）而且没有任何依赖。<br>Redux由<a href="http://facebook.github.io/flux/" target="_blank" rel="external">Flux</a>演变而来，但是避开了Flux的复杂性，上手快，使用简单，而且社区活跃，是目前主流的Flux数据流框架。<br>关于Redux文档可以看<a href="http://rackt.org/redux/" target="_blank" rel="external">英文原版</a>和<a href="http://camsong.github.io/redux-in-chinese/" target="_blank" rel="external">中文翻译版</a>。</p>
<hr>
<blockquote>
<p>从这里开始，默认读者已经阅读过Redux文档，有Redux基础。</p>
</blockquote>
<h2 id="React-Native-With-Redux"><a href="#React-Native-With-Redux" class="headerlink" title="React-Native With Redux"></a>React-Native With Redux</h2><p>我的<code>package.json</code>中引用的模块有：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dependencies"</span>: &#123;</div><div class="line">     <span class="string">"immutable"</span>: <span class="string">"^3.7.5"</span>,</div><div class="line">     <span class="string">"react"</span>: <span class="string">"^0.14.3"</span>,</div><div class="line">     <span class="string">"react-native"</span>: <span class="string">"^0.17.0"</span>,</div><div class="line">     <span class="string">"react-redux"</span>: <span class="string">"^3.1.0"</span>,</div><div class="line">     <span class="string">"redux"</span>: <span class="string">"^3.0.5"</span>,</div><div class="line">     <span class="string">"redux-thunk"</span>: <span class="string">"^1.0.2"</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>redux目前的最新版本3.0.5是基于react 0.14的，所以同时加入<code>react</code>和<code>redux</code>，<code>react-redux</code>是Redux的react绑定库，<code>redux-thunk</code>是为了实现异步Action Creator引入的。<br>下面我以<code>请求用户等级特权数据并刷新UI</code>为例梳理一遍整个数据流，包含<code>Action</code>，<code>Store</code>，<code>Reducer</code>三个重要概念。<br>首先，定义请求用户等级特权数据的ActionType：<br><code>react-native/constants/ActionTypes.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> FETCH_RANK_LIST = <span class="string">'FETCH_RANK_LIST'</span>;</div></pre></td></tr></table></figure></p>
<p>那么<code>FETCH_RANK_LIST</code>就代表了要执行请求等级特权数据的动作类型。然后开始定义Action：<br><code>react-native/actions/rank.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'../constants/ActionTypes'</span>;</div><div class="line"><span class="keyword">import</span> &#123;LEVEL_PRIVILEGES&#125; <span class="keyword">from</span> <span class="string">'../constants/Urls'</span>;</div><div class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">'../utils/RequestUtils'</span>;</div><div class="line"><span class="keyword">import</span> &#123;ToastShort&#125; <span class="keyword">from</span> <span class="string">'../utils/ToastUtils'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchLevelPrivileges</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> dispatch =&gt; &#123;</div><div class="line">		dispatch(fetchRankList());</div><div class="line">		request(LEVEL_PRIVILEGES, <span class="string">'get'</span>)</div><div class="line">			.then((rankList) =&gt; &#123;</div><div class="line">				dispatch(receiveRankList(rankList));</div><div class="line">			&#125;)</div><div class="line">			.catch((error) =&gt; &#123;</div><div class="line">				dispatch(receiveRankList([]));</div><div class="line">				<span class="keyword">if</span> (error != <span class="literal">null</span>) &#123;</div><div class="line">					ToastShort(error.message)</div><div class="line">				&#125;</div><div class="line">			&#125;)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchRankList</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		type: types.FETCH_RANK_LIST,</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">receiveRankList</span>(<span class="params">rankList</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		type: types.RECEIVE_RANK_LIST,</div><div class="line">		rankList: rankList</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的Action是异步的，因为请求是异步的。其实意思很简单，通过<code>fetchLevelPrivileges</code>请求了后端数据，异步获取了数据之后进行数据的接收，触发了接收数据的Action：<code>RECEIVE_RANK_LIST</code>，请求和接收其实是一个连续的动作。<br>那么定义完Action之后，就需要定义<code>Reducer</code>了：<br><code>react-native/reducers/rank.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'../constants/ActionTypes'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> initialState = &#123;</div><div class="line">	loading: <span class="literal">false</span>,</div><div class="line">	rankList: []</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">rank</span>(<span class="params">state = initialState, action</span>) </span>&#123;</div><div class="line">	<span class="keyword">switch</span> (action.type) &#123;</div><div class="line">		<span class="keyword">case</span> types.FETCH_RANK_LIST:</div><div class="line">			<span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</div><div class="line">				loading: <span class="literal">true</span></div><div class="line">			&#125;);</div><div class="line">		<span class="keyword">case</span> types.RECEIVE_RANK_LIST:</div><div class="line">			<span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</div><div class="line">				loading: <span class="literal">false</span>,</div><div class="line">				rankList: action.rankList</div><div class="line">			&#125;)</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">return</span> state;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到<code>initialState</code>是初始的状态，然后通过不同的type来更新state。这里state是全新的state，并不是在已有state的引用上改变数据，关于这点Redux的文档中有详细的解释，这里不再赘述。简单的reducer定义好之后，我们要开始定义<code>Store</code>了：<br><code>react-native/store/configure-store.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> thunkMiddleware <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</div><div class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">'../reducers/index'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> createStoreWithMiddleware = applyMiddleware(thunkMiddleware)(createStore);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">configureStore</span>(<span class="params">initialState</span>) </span>&#123;</div><div class="line">	<span class="keyword">const</span> store = createStoreWithMiddleware(rootReducer, initialState);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> store;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里使用了<code>redux-thunk</code>来支持异步Action，<code>Middleware</code>提供的是位于action发起之后，到达reducer之前的扩展点，这是一个比较重要的概念，具体请看redux文档理解。<code>rootReducer</code>是最终合并后的reducer：<br><code>react-native/reducers/index.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> notice <span class="keyword">from</span> <span class="string">'./notice'</span>;</div><div class="line"><span class="keyword">import</span> rank <span class="keyword">from</span> <span class="string">'./rank'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</div><div class="line">	notice,</div><div class="line">	rank</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer;</div></pre></td></tr></table></figure></p>
<p>这里用到了redux的<code>combineReducers</code>函数，将多个模块的reducer合并成一个。<br>最后我们需要串通整套数据流，我们需要做的是：<br><code>react-native/root.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">'react-redux/native'</span></div><div class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">'./store/configure-store'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./containers/app'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> store = configureStore();</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">	render() &#123;</div><div class="line">		<span class="keyword">return</span> (</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">        &#123;() =&gt; <span class="tag">&lt;<span class="name">App</span> /&gt;</span>&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Root;</div></pre></td></tr></table></figure></p>
<p>这非常关键，root.js是index.android.js注册的唯一入口，通过<code>Provider</code>组件讲store注入进整个app，至此，整套数据流就串通起来了。<br>那么串通起来是怎么样的呢？我来描述一下：用户点击进入等级特权页面，通过action中<code>fetchLevelPrivileges</code>做了请求数据的动作，然后dispatch了<code>FETCH_RANK_LIST</code>这个动作，触发了reducer更改state，刷新UI（此时应该是loading界面）；然后当数据请求完成之后dispatch了<code>RECEIVE_RANK_LIST</code>这个动作，接收到请求获取的数据，触发了reducer更改state，再刷新UI（此时应该展示完整页面）。这样数据流就非常清晰了：<code>Action =&gt; Dispatcher =&gt; Store =&gt; View</code>。当用户进行其他操作时，由View发起Action，继续这个单向的数据流，这样就完成将Flux单向数据流的思想通过Redux融入React-Native项目当中了。</p>
<blockquote>
<p>将<strong>Flux的思想</strong>应用于项目之中，确实感觉思路清晰，写起来心里踏实。</p>
</blockquote>
<h2 id="代码规范和语法糖"><a href="#代码规范和语法糖" class="headerlink" title="代码规范和语法糖"></a>代码规范和语法糖</h2><p>由于我是菜鸟，所以我在写的时候严格遵循了<a href="https://github.com/airbnb/javascript/tree/master/react" target="_blank" rel="external">Airbnb React/JSX Style Guide</a>，相信大厂应该没错的。<br>语法糖我全部使用了ES6，因为react-native已经使用了Babel完全支持了<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ES6语法糖</a>，可以使用ES6的新特性，而且我感觉ES6对于我来说更容易理解，因为我是个写Java的Android Developer……</p>
<h2 id="重构过程中遇到的坑"><a href="#重构过程中遇到的坑" class="headerlink" title="重构过程中遇到的坑"></a>重构过程中遇到的坑</h2><p>这里我要说明一点：<strong><a href="https://facebook.github.io/react-native/docs/debugging.html#content" target="_blank" rel="external">使用Chrome调试react-native</a></strong>非常重要！在重构的过程中，我都是通过debug来观察数据流，看哪一环出现了问题再去解决。<br>还有一个<strong>大坑！</strong><br>当手机开启<code>手势触摸</code>选项之后，在react-native页面，同时用三个或三个以上手指触摸上去你就会发现……crash了。iOS我没测试过，这个是我在Android机器上发现的问题，然而<strong>官方并没有解决办法</strong>，我安装了react-native官方的showcase案例的一个app，发现该问题同样存在。。。所以我只好<a href="https://github.com/facebook/react-native/issues/5246" target="_blank" rel="external">提了issue</a>。<br>还好这种情况很少，目前没有接到线下类似这样的crash反馈，估计是很多手机是不带手势触摸的，而且估计很多用户不会开启手势触摸，其实我用Android手机的时候一直没开过……在我写这篇文章的时候<a href="https://github.com/facebook/react-native/releases/tag/v0.18.0-rc" target="_blank" rel="external">react-native 0.18.0-rc</a>已经发布了，但是并没有看到修复类似的bug，不过0.18应该是一个相对较大的更新，<code>react-native-cli</code>也更新到了0.1.10，Android里react-native的依赖库也更新到了0.18.0版本，我打算等react-native发布0.18.0 release版本之后进行一次整体更新，继续踩坑……</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于我这个菜鸟来说，这次重构+新功能开发确实是有惊无险。总结一下：<br>所有action的定义都放在action包中，reducer放在reducers包中，store放在store包中，入口依然是index.android.js，只不过注册的时候直接指向root.js，通过root将store注入到app当中，所有的模块都包一层containers，在这里进行connect:<br><code>react-native/containers/RankContainer.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux/native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Rank <span class="keyword">from</span> <span class="string">'../components/Rank'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RankContainer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render() &#123;</div><div class="line">		<span class="keyword">return</span> (</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">Rank</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function mapStateToProps(state)&#123;</div><div class="line">	const &#123;rank&#125; = state;</div><div class="line">	return &#123;</div><div class="line">		rank</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default connect(mapStateToProps)(RankContainer);</div></pre></td></tr></table></figure></p>
<p>这里可以看到，所有的页面都是<code>组件</code>，这里的<code>&lt;Rank /&gt;</code>就是等级特权页面组件，包括自定义控件等组件全部放入components包中，于是整个工程被组件化了，更容易与iOS进行融合。然后在utils包中定义utils，constants包中写了ActionTypes和Urls。在新增模块的时候，思路已经非常清晰了，其实就是做<strong>填空题</strong>：在ActionTypes中添加动作定义，在actions中定义Action，在reducers中定义reducer，然后在containers中写好容器外壳，最后在components中写组件，个人感觉是<strong>可扩展的弹性小架构</strong>，思路、封装、数据流、组件等等都比较清晰，目前这就是我重构之后的样子了。因为这些都是我一个人摸索的，等与公司的web工程师们交流时他们或许会给出更好的建议，期待ing~~</p>
<p>最后附上我的工程目录(IDE: Sublime Text 3)：<br><img src="http://7xr0xq.com1.z0.glb.clouddn.com/react-native.jpg" alt="react-native"></p>
<p>至此，本文结束。<br>欢迎大家互相交流讨论。我只是菜鸡，抛砖引玉~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请注明出处：&lt;a href=&quot;http://richardcao.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://richardcao.me/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;经过上次的react-native小模块
    
    </summary>
    
      <category term="hybrid" scheme="http://richard-cao.github.io/categories/hybrid/"/>
    
    
      <category term="react-native" scheme="http://richard-cao.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>React-Native Android 热更新</title>
    <link href="http://richard-cao.github.io/2015/12/03/React-native-Android-%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://richard-cao.github.io/2015/12/03/React-native-Android-热更新/</id>
    <published>2015-12-03T21:58:00.000Z</published>
    <updated>2016-07-30T04:43:26.209Z</updated>
    
    <content type="html"><![CDATA[<p>转载请注明出处：<a href="http://richardcao.me/" target="_blank" rel="external">http://richardcao.me/</a></p>
<p>继上次<a href="http://richard-cao.github.io/2015/11/24/React-native-Android-%E5%88%9D%E6%AC%A1%E8%B8%A9%E5%9D%91%E4%B9%8B%E6%97%85/">React-native Android 初次踩坑之旅</a>的分享之后，这次分享的内容是React-native Android 热更新实现。</p>
<p>本文目录：</p>
<blockquote>
<ul>
<li>网上已知方案</li>
<li>分析与发现</li>
<li>新的热更新方案</li>
</ul>
</blockquote>
<p>撰写本文基于的开发环境：</p>
<blockquote>
<ul>
<li>操作系统：OS X 10.11.1</li>
<li>react-native Android版本：0.16.0</li>
<li>npm中react-native版本： 0.16.0-rc</li>
</ul>
</blockquote>
<h2 id="网上已知方案"><a href="#网上已知方案" class="headerlink" title="网上已知方案"></a>网上已知方案</h2><p>首先说下网上已有的方案，这是我找到的方案，并且测试确实可以热更新的：<a href="https://github.com/fengjundev/React-Native-Remote-Update" target="_blank" rel="external">React-Native-Remote-Update</a>。简述下这个方案实现热更新原理是反射调用了<code>ReactInstanceManagerImpl</code>中的如下方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recreateReactContextInBackground</span><span class="params">(</span></span></div><div class="line">      JavaScriptExecutor jsExecutor,</div><div class="line">      JSBundleLoader jsBundleLoader) &#123;</div><div class="line">    UiThreadUtil.assertOnUiThread();</div><div class="line"></div><div class="line">    ReactContextInitParams initParams = <span class="keyword">new</span> ReactContextInitParams(jsExecutor, jsBundleLoader);</div><div class="line">    <span class="keyword">if</span> (!mIsContextInitAsyncTaskRunning) &#123;</div><div class="line">      <span class="comment">// No background task to create react context is currently running, create and execute one.</span></div><div class="line">      ReactContextInitAsyncTask initTask = <span class="keyword">new</span> ReactContextInitAsyncTask();</div><div class="line">      initTask.execute(initParams);</div><div class="line">      mIsContextInitAsyncTaskRunning = <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// Background task is currently running, queue up most recent init params to recreate context</span></div><div class="line">      <span class="comment">// once task completes.</span></div><div class="line">      mPendingReactContextInitParams = initParams;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>然后通过自定义<code>JSBundleLoader</code>将bundle指向的文件重定向，反射调用这个方法就可以实现热更新，重新加载重定向之后的bundle文件，这个bundle文件就是从服务端下载好的。</p>
<p>这个方案是通过反射调用private方法实现的热更新，在我看来还是有些不安全的，Facebook没把这个方法public应该是有原因的，可能他们没想用这种方法去公开的实现热更新，那么也许在迭代的过程中，可能这个反射调用的方法就失效了，那么我认为用这个方案做线上的热更新是不太安全的。</p>
<h2 id="分析与发现"><a href="#分析与发现" class="headerlink" title="分析与发现"></a>分析与发现</h2><p>在更新react-native Android版本之后，我发现在<code>ReactInstanceManager.Builder</code>中有这么一个方法可以使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Path to the JS bundle file to be loaded from the file system.</div><div class="line">     *</div><div class="line">     * Example: &#123;<span class="doctag">@code</span> "assets://index.android.js" or "/sdcard/main.jsbundle&#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">setJSBundleFile</span><span class="params">(String jsBundleFile)</span> </span>&#123;</div><div class="line">      mJSBundleFile = jsBundleFile;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>看这个注释，意思就是可以通过这个方法实现bundle文件的重定向。也就是说，我们可以通过这个方法来实现热更新。具体思路继续往下看，其实挺简单。</p>
<h2 id="新的热更新方案"><a href="#新的热更新方案" class="headerlink" title="新的热更新方案"></a>新的热更新方案</h2><p>首先，看更改之后的<code>ReactInstanceManager</code>单例变成什么样子了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by caolicheng on 15/11/12.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrowdReactInstanceManager</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String MODULE_NAME = <span class="string">"CrowdReactApp"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CrowdReactInstanceManager</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ReactInstanceManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Holder.sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ReactInstanceManager sInstance = ReactInstanceManager.builder()</div><div class="line">                .setApplication((Application) ElemeApplicationContext.getContext())</div><div class="line">                .setJSMainModuleName(<span class="string">"react-native/index.android"</span>)</div><div class="line">                .addPackage(<span class="keyword">new</span> MainReactPackage())</div><div class="line">                .addPackage(<span class="keyword">new</span> CrowdReactPackage())</div><div class="line">                .setUseDeveloperSupport(BuildConfig.DEBUG)</div><div class="line">                .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">                .setJSBundleFile(ReactJsBundleInstanceManager.getInstance().getJSBundleFile())</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以很清晰的看到，之前的<code>setBundleAssetName</code>方法被删除了，取而代之的是<code>setJSBundleFile</code>方法，里面是<code>ReactJsBundleInstanceManager</code>这个单例，从这个单例中直接拿出bundle文件路径，相当于bundle被重定向了。<br>我们再看看这个<code>ReactJsBundleInstanceManager</code>到底是个什么：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by caolicheng on 15/12/2.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactJsBundleInstanceManager</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BUNDLE_NAME = <span class="string">"index.android.bundle"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ReactJsBundleInstanceManager</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSBundleManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Holder.sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> JSBundleManager sInstance = <span class="keyword">new</span> JSBundleManager.Builder()</div><div class="line">                .setBundleAssetName(BUNDLE_NAME)</div><div class="line">                .setAssetDir(ElemeApplicationContext.getContext().getFilesDir())</div><div class="line">                .setEnabled(!BuildConfig.DEBUG)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们很明显的看到了这是一个叫<code>JSBundleManager</code>这个东西的单例，这个东西设置了bundle的名字、bundle的父文件路径、在release时候启动更新。也就是说，<code>JSBundleManager</code>中完成了react-native热更新的逻辑，说白了就是：下载新的bundle，替换旧的bundle。</p>
<p>那么来了一个问题：因为<code>ReactInstanceManager</code>是个单例，也就是说，<code>setJSBundleFile</code>的路径一开始就已经固定了，那么如果我们把bundle文件打包在assets文件夹下的话，就要在一开始的时候把assets文件目录下的bundle文件copy一份到我们的热更新bundle的路径下，类似这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initReactNative</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (PreferenceManager.isFirstStart()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                File bundle = <span class="keyword">new</span> File(ReactJsBundleInstanceManager.getInstance().getJSBundleFile());</div><div class="line">                IOHelpers.saveStream(getAssets().open(<span class="string">"index.android.bundle"</span>), bundle);</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>react-native热更新就完成了。<br>这里我把我的<code>JSBundleManager</code>代码贴出来，这部分其实是最关键的，但是我的代码没法直接使用，只是告诉大家一个思路：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSBundleManager</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BUNDLE_VERSION = <span class="string">"bundle_version"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_BUNDLE_VERSION = <span class="string">"0.0.0"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mBundleAssetName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Callback mCallback;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Boolean mEnabled;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> File assetDir;</div><div class="line">    <span class="keyword">private</span> Upgrader upgrader;</div><div class="line"></div><div class="line">    JSBundleManager(<span class="meta">@NonNull</span> String bundleAssetName, <span class="meta">@NonNull</span> File bundleDir,</div><div class="line">                    <span class="meta">@Nullable</span> Callback callback, <span class="meta">@Nullable</span> Boolean enabled) &#123;</div><div class="line">        mBundleAssetName = bundleAssetName;</div><div class="line">        mCallback = callback;</div><div class="line">        mEnabled = enabled;</div><div class="line">        assetDir = <span class="keyword">new</span> File(bundleDir, <span class="string">"assets"</span>);</div><div class="line">        upgrader = <span class="keyword">new</span> Upgrader();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJSBundleFile</span><span class="params">()</span> </span>&#123;</div><div class="line">        File assetFile = <span class="keyword">new</span> File(assetDir, mBundleAssetName);</div><div class="line">        <span class="keyword">if</span> (assetFile.exists()) &#123;</div><div class="line">            <span class="keyword">return</span> assetFile.getAbsolutePath();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">"assets://"</span> + mBundleAssetName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取bundle版本号</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBundleVersion</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SharedManageUtils.getString(BUNDLE_VERSION, DEFAULT_BUNDLE_VERSION);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> JSBundleManager <span class="title">checkUpdate</span><span class="params">(AppVersion appVersion)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mEnabled == <span class="keyword">null</span> || mEnabled) &#123;</div><div class="line">            checkAndDownloadUpdate(appVersion);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">downloadBundle</span><span class="params">(<span class="keyword">final</span> AppVersion appVersion)</span> </span>&#123;</div><div class="line">        ReactUpdateInfo reactUpdateInfo = <span class="keyword">new</span> ReactUpdateInfo(ElemeApplicationContext.getContext());</div><div class="line">        reactUpdateInfo.setDownloadUrl(appVersion.getDownloadUrl());</div><div class="line">        upgrader.upgrade(reactUpdateInfo, <span class="keyword">new</span> DownloadProgressListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(<span class="keyword">int</span> progress)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">                    mCallback.onDownloading();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> DownloadResultListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadSuccess</span><span class="params">(DownloadFile file)</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    File bundle = <span class="keyword">new</span> File(getJSBundleFile());</div><div class="line">                    <span class="keyword">if</span> (bundle.exists()) &#123;</div><div class="line">                        bundle.delete();</div><div class="line">                    &#125;</div><div class="line">                    FileUtil.copyFile(file.getFile(), <span class="keyword">new</span> File(assetDir.getPath(), mBundleAssetName));</div><div class="line">                    SharedManageUtils.set(BUNDLE_VERSION, appVersion.getLatestVersion());</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">                        mCallback.onError(e);</div><div class="line">                    &#125;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    FileUtil.deleteFile(file.getFile());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">                    mCallback.onUpdateReady();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadFail</span><span class="params">(Exception e)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">                    mCallback.onError(e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkAndDownloadUpdate</span><span class="params">(AppVersion appVersion)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (appVersion.isUpdate()) &#123;</div><div class="line">            downloadBundle(appVersion);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">                mCallback.onNoUpdate();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onDownloading</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Exception e)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onNoUpdate</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onUpdateReady</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> String mBundleAssetName;</div><div class="line">        <span class="keyword">private</span> File mAssetDir;</div><div class="line">        <span class="keyword">private</span> Callback mCallback;</div><div class="line">        <span class="keyword">private</span> Boolean mEnabled;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setBundleAssetName</span><span class="params">(@NonNull <span class="keyword">final</span> String bundleAssetName)</span> </span>&#123;</div><div class="line">            mBundleAssetName = bundleAssetName;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setAssetDir</span><span class="params">(@NonNull <span class="keyword">final</span> File assetDir)</span> </span>&#123;</div><div class="line">            mAssetDir = assetDir;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setCallback</span><span class="params">(@Nullable <span class="keyword">final</span> Callback callback)</span> </span>&#123;</div><div class="line">            mCallback = callback;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setEnabled</span><span class="params">(@Nullable <span class="keyword">final</span> Boolean enabled)</span> </span>&#123;</div><div class="line">            mEnabled = enabled;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> JSBundleManager <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JSBundleManager(mBundleAssetName, mAssetDir, mCallback, mEnabled);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>简单来说，思路就是：当外部调用<code>checkUpdate</code>方法的时候，传进来的<code>AppVersion</code>是从服务端获取到的数据，包含bundle最新的版本号、是否需要更新和下载链接等信息。判断之后如果需要更新，那么就下载bundle到缓存中，如果成功下载，就把bundle复制到我这里自己定义热更新bundle的<code>assetDir</code>文件夹中，最后删除缓存中的bundle文件。</p>
<p>至此，我的react-native热更新方案就结束了。</p>
<p>欢迎大家互相讨论交流。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请注明出处：&lt;a href=&quot;http://richardcao.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://richardcao.me/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;继上次&lt;a href=&quot;http://richard-cao.gi
    
    </summary>
    
      <category term="hybrid" scheme="http://richard-cao.github.io/categories/hybrid/"/>
    
    
      <category term="react-native" scheme="http://richard-cao.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>React-Native Android 初次踩坑之旅</title>
    <link href="http://richard-cao.github.io/2015/11/24/React-native-Android-%E5%88%9D%E6%AC%A1%E8%B8%A9%E5%9D%91%E4%B9%8B%E6%97%85/"/>
    <id>http://richard-cao.github.io/2015/11/24/React-native-Android-初次踩坑之旅/</id>
    <published>2015-11-24T21:37:27.000Z</published>
    <updated>2016-07-30T04:43:26.209Z</updated>
    
    <content type="html"><![CDATA[<p>转载请注明出处：<a href="http://richardcao.me/" target="_blank" rel="external">http://richardcao.me/</a></p>
<blockquote>
<p>本文背景：项目要上线一个app内部通知中心的功能模块，UI比较简单，ListView为主。之前关注react-native一段时间，所以打算使用react-native踩坑，激进的来一把。</p>
</blockquote>
<p>本文目录</p>
<blockquote>
<ul>
<li>如何把react-native集成到已经存在的Android studio工程中</li>
<li>如何调试</li>
<li>开发过程中踩过的那些坑</li>
<li>Android打包过程中踩过的那些坑</li>
</ul>
</blockquote>
<p>本文一切操作均在OS X系统上执行，调试手机为Android手机。</p>
<h2 id="如何把react-native集成到已经存在的Android-studio工程中"><a href="#如何把react-native集成到已经存在的Android-studio工程中" class="headerlink" title="如何把react-native集成到已经存在的Android studio工程中"></a>如何把react-native集成到已经存在的Android studio工程中</h2><p>这部分主要参考官方文档<a href="https://facebook.github.io/react-native/docs/embedded-app-android.html#content" target="_blank" rel="external">Intergrating with Existing Apps</a>内容，这里简述一下：</p>
<h3 id="导入react-native相关引用和权限"><a href="#导入react-native相关引用和权限" class="headerlink" title="导入react-native相关引用和权限"></a>导入react-native相关引用和权限</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.facebook.react:react-native:0.15.1'</span></div></pre></td></tr></table></figure>
<p>我开发的时候最新版本是0.15.1，如果想查看最新版本请戳<a href="http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22com.facebook.react%22%20AND%20a%3A%22react-native%22" target="_blank" rel="external">Maven Central</a>。然后<br>在studio工程中的<code>AndroidManifest.xml</code>中加入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>在Android中支持晃动手机或点击菜单键打开react-native的调试页面，需要在<code>AndroidManifest.xml</code>中加入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.facebook.react.devsupport.DevSettingsActivity"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>react-natice需要app的<code>build.gradle</code>文件中配置<code>compileSdkVersion</code>为23，<code>minSdkVersion</code>为16，但是我们项目的app<code>minSdkVersion</code>为15，所以为了支持15，要修改app的<code>build.gradle</code>文件添加如下内容<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section">defaultConfig</span> &#123;</div><div class="line">   <span class="section">ndk</span> &#123;</div><div class="line">      <span class="attribute">abiFilters</span> <span class="string">"armeabi-v7a"</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在<code>AndroidManifext.xml</code>中添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">tools:overrideLibrary</span>=<span class="string">"com.facebook.react"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>这时候可能会报一个ndk的错误，只要在<code>gradle.properties</code>中添加<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android.useDeprecatedNdk=<span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>即可。</p>
<h3 id="写好基础的Android原生和js代码"><a href="#写好基础的Android原生和js代码" class="headerlink" title="写好基础的Android原生和js代码"></a>写好基础的Android原生和js代码</h3><p>这部分参照官方文档<a href="https://facebook.github.io/react-native/docs/embedded-app-android.html#content" target="_blank" rel="external">Intergrating with Existing Apps</a>中的Add native code和Add JS to your app部分内容。最后官方还提出了如果想要在多个activity或fragment中使用react，需要把<code>ReactInstanceManager</code>用单例实现，这里我的实现很简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactInstanceManager</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String MODULE_NAME = <span class="string">"CrowdReactApp"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ReactInstanceManager sInstance = ReactInstanceManager.builder()</div><div class="line">                    .setApplication((Application) ElemeApplicationContext.getContext())</div><div class="line">                    .setBundleAssetName(<span class="string">"index.android.bundle"</span>)</div><div class="line">                    .setJSMainModuleName(<span class="string">"react-native/index.android"</span>)</div><div class="line">                    .addPackage(<span class="keyword">new</span> MainReactPackage())</div><div class="line">                    .addPackage(<span class="keyword">new</span> CrowdReactPackage())</div><div class="line">                    .setUseDeveloperSupport(BuildConfig.DEBUG)</div><div class="line">                    .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">                    .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ReactInstanceManager</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ReactInstanceManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Holder.sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的<code>index.android.bundle</code>就是react部分打包生成好的文件，Android打包之后react部分就是根据这个文件来生成代码，热更新也是更换这个文件。<code>react-native/index.android</code>就是react-native目录下的<code>index.android.js</code>文件。这里我在app工程中新建了react-native文件夹，react代码都放入该文件夹中。</p>
<h3 id="Android原生模块和js部分拆分开发"><a href="#Android原生模块和js部分拆分开发" class="headerlink" title="Android原生模块和js部分拆分开发"></a>Android原生模块和js部分拆分开发</h3><p>js部分我使用Sublime Text 3进行开发。这里简单讲讲我配置的简易插件：</p>
<ul>
<li>首先毫无疑问的就是<a href="https://babeljs.io/" target="_blank" rel="external">Babel</a>，支持es6语法高亮，在Sublime Text 3中安装请看<a href="https://github.com/babel/babel-sublime" target="_blank" rel="external">babel-sublime</a>。</li>
<li>jsx的语法检查插件，参考<a href="https://github.com/royriojas/esformatter-jsx" target="_blank" rel="external">esformatter-jsx</a>，具体安装配置文档已经说的很清楚了，这里不再赘述。若想了解jsx请查看<a href="https://facebook.github.io/react/docs/jsx-in-depth.html" target="_blank" rel="external">JSX in Depth</a>。</li>
</ul>
<p>至此Android工程中已经集成好react-native模块了。</p>
<h2 id="如何调试"><a href="#如何调试" class="headerlink" title="如何调试"></a>如何调试</h2><p>在看这一部分之前，要保证上面一部分的内容已经非常仔细的执行完毕，否则一定会报错。尤其是对上面提到的官方文档部分的仔细研读。</p>
<p>关于react-native的调试我们知道，实际上就是在本地起一个node server，然后当js文件有改动或debug模式下手动选择reload js时候会自动更新bundle文件，达到改动js文件后即时显示的调试效果。</p>
<p>这里我没有用虚拟机调试，我直接使用真机调试。主要参考官方文档<a href="https://facebook.github.io/react-native/docs/running-on-device-android.html#content" target="_blank" rel="external">Running On Device</a>部分，对于Android 5.0以上的手机，在USB调试模式下连接电脑run<code>adb reverse tcp:8081 tcp:8081</code>命令即可，晃动手机弹出调试窗口，选择reload js就可以看到效果。如果是Android5.0以下的手机，在晃动手机或者点击menu键弹出的react-native调试菜单中选择<code>Dev Settings</code>然后配置<code>Debug server host &amp; port for device</code>中配置你当前PC的ip地址加端口号即可，例如<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:8081</span></div></pre></td></tr></table></figure></p>
<p>端口号必须是8081，ip地址根据当前pc的ip地址填写，此时手机和PC必须在同一wifi下，如果用这种方式调试react-native，可以不插USB。<br>在这个页面我们还可以看到一个选项叫<code>Auto reload on JS change</code>，如果我们选择它，就会在选项后面的小方框打勾，启动js改边自动更新的模式，这时候需要安装<code>watchman</code>才可以生效，如何安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install watchman</div></pre></td></tr></table></figure></p>
<p>这里我是安装过homebrew的，如果没有安装的可以看<a href="http://brew.sh/" target="_blank" rel="external">Homebrew</a>进行安装配置。</p>
<p>调试部分内容到此结束。</p>
<h2 id="开发过程中踩的那些坑"><a href="#开发过程中踩的那些坑" class="headerlink" title="开发过程中踩的那些坑"></a>开发过程中踩的那些坑</h2><p>在开发之前，请务必仔细研读一篇非常优秀的博文<a href="http://www.race604.com/react-native-component-lifecycle/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">React Native中组件的生命周期</a>和官方文档中<a href="https://facebook.github.io/react-native/docs/native-modules-android.html#content" target="_blank" rel="external">Native Modules</a>，读懂之后再进行开发。</p>
<p>我们知道，react的核心就是虚拟DOM，关于这部分网上介绍的文章太多了，在此不再赘述。这里主要以我用到的<a href="https://facebook.github.io/react-native/docs/listview.html#content" target="_blank" rel="external">ListView</a>控件和<a href="https://facebook.github.io/react-native/docs/image.html#content" target="_blank" rel="external">Image</a>控件两大坑为主进行介绍，满满都是泪。</p>
<p>首先是ListView的常规写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            dataSource: <span class="keyword">new</span> ListView.DataSource(&#123;</div><div class="line">                rowHasChanged: (row1, row2) =&gt; row1 !== row2,</div><div class="line">            &#125;),</div><div class="line">            loaded: <span class="literal">false</span>,</div><div class="line">        &#125;;</div><div class="line">    &#125;,</div></pre></td></tr></table></figure></p>
<p>我们需要了解的是，<code>rowHasChanged</code>中代码的意思是，当row1和row2不同时刷新Listview。这里的不同，是指<strong>引用不同</strong>，只是数据不同是不满足这个条件的。这是ListView的坑。说到引用不同，自然而然想到deepclone，Facebook自家提供了一个deepclone的高效解决方案<a href="https://facebook.github.io/immutable-js/" target="_blank" rel="external">Immutable</a>。我项目中就用到了它，后面我会讲我是怎么用的。写代码的时候要注意一下，<strong>render中代码如果注释掉会报错的，其他部分的代码可以注释，但是render中的UI部分代码不能注释，要么就删掉，要么就保留</strong>。</p>
<p>我们的逻辑应当是由数据来控制UI的显示，数据通过HTTP请求得到，那么免不了需要封装网络请求模块，这里我分享一下我是如何封装的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> NativeManagerAndroid = <span class="built_in">require</span>(<span class="string">'./NativeManagerAndroid'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">RequestService</span>(<span class="params"></span>) </span>&#123; <span class="comment">// Singleton pattern</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> RequestService.instance === <span class="string">'object'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> RequestService.instance;</div><div class="line">    &#125;</div><div class="line">    RequestService.instance = <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">RequestService.prototype._httpHeader = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) =&gt; &#123;</div><div class="line">    NativeManagerAndroid.header((header) =&gt; &#123;</div><div class="line">        resolve(header);</div><div class="line">    &#125;);</div><div class="line">&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">RequestService.prototype.request = <span class="function"><span class="keyword">function</span>(<span class="params">url, method, body</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> isOk;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) =&gt; &#123;</div><div class="line">    <span class="keyword">this</span>._httpHeader().then((header) =&gt; &#123;</div><div class="line">        fetch(header.Host + url, &#123;</div><div class="line">            method: method,</div><div class="line">            headers: &#123;</div><div class="line">                <span class="string">'Content-Type'</span>: header.Content_Type,</div><div class="line">                <span class="string">'User-Agent'</span>: header.User_Agent,</div><div class="line">                <span class="string">'X-VERSION'</span>: header.X_VERSION,</div><div class="line">                <span class="string">'X-DEVICE'</span>: <span class="number">1</span>, <span class="comment">//表示Android设备，iOS为2</span></div><div class="line">                <span class="string">'API-TIME'</span>: header.API_TIME,</div><div class="line">                <span class="string">'API-DEBUG'</span>: header.API_DEBUG,</div><div class="line">                <span class="string">'X-TOKEN'</span>: header.X_TOKEN,</div><div class="line">                <span class="string">'X-ID'</span>: header.X_ID,</div><div class="line">            &#125;,</div><div class="line">            body: body,</div><div class="line">        &#125;)</div><div class="line">            .then((response) =&gt; &#123;</div><div class="line">                <span class="keyword">if</span> (response.ok) &#123;</div><div class="line">                    isOk = <span class="literal">true</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    isOk = <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> response.json();</div><div class="line">            &#125;)</div><div class="line">            .then((responseData) =&gt; &#123;</div><div class="line">                <span class="keyword">if</span> (isOk) &#123;</div><div class="line">                    resolve(responseData);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    reject(responseData.message);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            .catch((error) =&gt; &#123;</div><div class="line">                reject(error);</div><div class="line">            &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;)</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = RequestService;</div></pre></td></tr></table></figure></p>
<p>简单解释一下，这里的<code>NativeManagerAndroid</code>是我封装的Android原生模块的js部分，<code>NativeManagerAndroid.header</code>方法执行的是Android原生事先写好的header方法，关于这部分请再次仔细研读<a href="https://facebook.github.io/react-native/docs/native-modules-ios.html#content" target="_blank" rel="external">Native Modules</a>，我这个方法主要是从原生代码中获取http的header，然后使用react-native自带的<code>fetch</code>进行http网络请求的封装。<code>fetch</code>返回的是<code>promise</code>，所以我利用了promise的特性进行封装，关于<code>fetch and promise</code>请仔细研读官方文档<a href="https://facebook.github.io/react-native/docs/network.html#content" target="_blank" rel="external">Network</a>部分。注意：<code>response.ok</code>是HTTP CODE在200到300之间。<code>module.exprots = RequestService</code>是指把当前RequestService.js作为一个module，可以在其他js文件中引用。</p>
<p>注意一下，如果用fetch执行put请求，必须有body，否则会crash，如果没有的话也要传一个空的body，像这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> body = <span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>关于react-native的StyleSheet部分，采用的是flexbox的样式，在开发之前请先阅读<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">A Complete Guide to Flexbox</a>。关于点击反馈，请查看官方文档<code>COMPONENTS</code>的TouchableHighlight，TouchableNativeFeedback，TouchableOpacity，TouchableWithoutFeedback。</p>
<p>关于Immutable.js的使用，我代码中是这么用的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newDs = [];</div><div class="line">newDs = <span class="keyword">this</span>.state.ds.slice();</div><div class="line">notice.status = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> changeNotice = Immutable.Map(notice);</div><div class="line">newDs[rowID] = changeNotice.toObject();</div><div class="line"><span class="keyword">this</span>.setState(&#123;</div><div class="line">    dataSource: <span class="keyword">this</span>.state.dataSource.cloneWithRows(newDs),</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这段代码已经很好的解释了deepclone在这个模块里的用法，这时候<code>dataSource</code>的引用已经改变了。Immutable.js的运用远不止这么一点，具体还是要在项目中慢慢体会，仔细研读Immutable的官方文档。注意：这里的<code>this.state.ds</code>是每次从网上拉取新数据是本地的备份，参见<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Request.request(NOTICE_LIST_URL, <span class="string">'get'</span>)</div><div class="line">    .then((noticeList) =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            dataSource: <span class="keyword">this</span>.state.dataSource.cloneWithRows(noticeList.notice_list),</div><div class="line">            loaded: <span class="literal">true</span>,</div><div class="line">            ds: noticeList.notice_list,</div><div class="line">        &#125;);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<p><code>load</code>状态我是用来判断当前view是否展示loading界面还是listview界面。react的render机制，要么是state改变，要么是props改变，就会执行render进行UI刷新，我主要用到的是通过state来控制是否刷新UI。这里有个优化小技巧，我添加了这么一行代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mixins: [React.addons.PureRenderMixin],</div></pre></td></tr></table></figure></p>
<p>这样可以减少不必要的render次数，具体参见React的官方文档<a href="https://facebook.github.io/react/docs/pure-render-mixin.html" target="_blank" rel="external">PureRenderMixin</a>。</p>
<p>下面讲讲Image的坑。</p>
<p>根据react-native的官方文档Image部分，如果需要加载本地静态资源（与Android原生共用图片资源），需要<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Image</div><div class="line">  source=&#123;<span class="built_in">require</span>(<span class="string">'image!myIcon'</span>)&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>但是，当工程跑起来之后，你会发现报了错：提示image!myIcon找不到。这里我反复google才发现2种解决方案：</p>
<p>1.加载静态图片资源的方法与官网写法一致，启动node server时执行如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native start --assetRoots ./android/app/src/main/res/</div></pre></td></tr></table></figure></p>
<p>在debug模式下就可以正常加载本地静态资源并进行调试了，但是在release打包后会crash，原因就是静态资源找不到，暂时没找到解决方案。<br>2.加载静态图片资源的写法改为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Image</div><div class="line">  source=&#123; &#123; uri: <span class="string">"myIcon"</span>, isStatic: <span class="literal">true</span>&#125; &#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>启动node server时只要执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native start</div></pre></td></tr></table></figure></p>
<p>即可。这种解决方案在<strong>Android release打包时同样有效</strong>，我目前就采用的这个解决方案。</p>
<p>这是个大坑，花了好长时间才解决。</p>
<h2 id="在Android打包过程中踩过的那些坑"><a href="#在Android打包过程中踩过的那些坑" class="headerlink" title="在Android打包过程中踩过的那些坑"></a>在Android打包过程中踩过的那些坑</h2><p>首当其冲的是混淆，原生代码中所有自定义的<code>ReactPackage</code>和<code>ReactContextBaseJavaModule</code>等和reactjs部分配合使用的原生模块都必须keep掉，否则会crash，找不到原生的方法或类。这点我没在官方文档上找到说明，估计是Facebook觉得常识就应该这么做吧……</p>
<p>Image静态资源问题上面已经讲到了，在打包过程中最后选取的解决方案，这是个坑。</p>
<p>最后推荐开发过程中可以参考的一个项目<a href="https://github.com/race604/ZhiHuDaily-React-Native" target="_blank" rel="external">ZhiHuDaily-React-Native</a>，这个项目的作者也写了相关博客，很有用。</p>
<p>踩坑还要继续，毕竟以前几乎没有写过js，也是小白，慢慢学习中，比较喜欢React，欢迎与我交流。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请注明出处：&lt;a href=&quot;http://richardcao.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://richardcao.me/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文背景：项目要上线一个app内部通知中
    
    </summary>
    
      <category term="hybrid" scheme="http://richard-cao.github.io/categories/hybrid/"/>
    
    
      <category term="react-native" scheme="http://richard-cao.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>将cordova集成到Android studio的最佳方法</title>
    <link href="http://richard-cao.github.io/2015/11/22/%E5%B0%86cordova%E9%9B%86%E6%88%90%E5%88%B0Android-studio%E7%9A%84%E6%9C%80%E4%BD%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://richard-cao.github.io/2015/11/22/将cordova集成到Android-studio的最佳方法/</id>
    <published>2015-11-22T00:21:52.000Z</published>
    <updated>2016-07-30T04:43:26.213Z</updated>
    
    <content type="html"><![CDATA[<p>转载请注明出处：<a href="http://richardcao.me/" target="_blank" rel="external">http://richardcao.me/</a></p>
<blockquote>
<p>网上有很多集成cordova到Android studio中进行Android开发的方法，这里我给大家介绍一种比较简单的方法，亲测有效。</p>
</blockquote>
<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>首先我们明确目的，我们希望把cordova快速集成到Android studio中，为了以后的复用，我们希望做成jar或者aar，可以用于以后的项目，目的明确了，后面就一步一步来吧。</p>
<h3 id="cordova相关代码"><a href="#cordova相关代码" class="headerlink" title="cordova相关代码"></a>cordova相关代码</h3><p>代码哪里来？大家不需要找，请看<a href="https://github.com/apache/cordova-android" target="_blank" rel="external">这里</a>，将代码clone下来后发现有这么几个我们要用的文件夹：</p>
<ul>
<li><strong>cordova-js-src</strong>：这部分是cordova-android对应的js代码，混合开发的时候H5需要将这个文件夹导入web工程，并做相应的引用和配置</li>
<li><strong>framework</strong>：这部分是cordova-android部分代码，需要全部拿过来</li>
<li><strong>test</strong>：这部分是测试工程，我们在集成好cordova后，还要根据测试工程实例进行相关配置，才能完全集成cordova到Android studio中进行hybrid开发。</li>
</ul>
<h3 id="开始集成"><a href="#开始集成" class="headerlink" title="开始集成"></a>开始集成</h3><ol>
<li>直接把framework模块打一个aar或jar包（我打的是aar）；</li>
<li>把cordova-js-src复制到web工程中；</li>
<li>结束。<br>卧槽？这么简单？别激动，还没完，继续往下看。</li>
</ol>
<h3 id="融合cordova到自己的工程中"><a href="#融合cordova到自己的工程中" class="headerlink" title="融合cordova到自己的工程中"></a>融合cordova到自己的工程中</h3><p>首先，我们建一个自己的Android工程，然后我们复制test工程中的/res/xml/config.xml文件到我们自己工程的/res/xml/config.xml中，不要改路径，然后修改config.xml文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">'1.0'</span> encoding=<span class="string">'utf-8'</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">widget</span></span></div><div class="line">    <span class="attr">id</span>=<span class="string">"your package name"</span>    //包名</div><div class="line">    <span class="attr">version</span>=<span class="string">"0.0.1"</span>&gt;          //版本号</div><div class="line">    <span class="tag">&lt;<span class="name">content</span> <span class="attr">src</span>=<span class="string">"index.html"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">"xxxxx"</span>&gt;</span>    //插件名</div><div class="line">        <span class="tag">&lt;<span class="name">param</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"android-package"</span></div><div class="line">            <span class="attr">value</span>=<span class="string">"your package name.xxxxx"</span> /&gt;  //插件路径</div><div class="line">        <span class="tag">&lt;<span class="name">param</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"onload"</span></div><div class="line">            <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">feature</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">preference</span></span></div><div class="line">        <span class="attr">name</span>=<span class="string">"loglevel"</span></div><div class="line">        <span class="attr">value</span>=<span class="string">"DEBUG"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">preference</span></span></div><div class="line">        <span class="attr">name</span>=<span class="string">"useBrowserHistory"</span></div><div class="line">        <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">preference</span></span></div><div class="line">        <span class="attr">name</span>=<span class="string">"exit-on-suspend"</span></div><div class="line">        <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">preference</span></span></div><div class="line">        <span class="attr">name</span>=<span class="string">"showTitle"</span></div><div class="line">        <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">widget</span>&gt;</span></div></pre></td></tr></table></figure>
<p>极其重要的信息我已经做了注释，我想大家都能看懂，那就没问题了。<strong>这个配置文件是极其重要的，必须要有，切记切记！</strong></p>
<p>至此，集成就结束了。那么如何开发？我简单讲一下native这边需要做什么。</p>
<ul>
<li><strong>Plugin</strong>：大家在上文中可以看到插件的配置，那么插件是什么？其实就是cordova提供给native和js通信的管道，我们需要自己实现一个插件类，参考<a href="http://my.oschina.net/Cphone/blog/491003" target="_blank" rel="external">这里</a></li>
<li><strong>AllowBridgeAccess</strong>：在插件类中，我们需要：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">shouldAllowBridgeAccess</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这样我们的插件才可以被允许作为bridge（生效）。</p>
<ul>
<li><strong>Lifecycle</strong>：为了后续布局的扩展，我没有选择extend CordovaActivity，那么我需要模仿CordovaActivity处理相关生命周期，这里我的布局很简单：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/exam_home"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">org.apache.cordova.engine.SystemWebView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/cordovaWebView"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后我们看activity中的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ContentView</span>(R.layout.activity_exam)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExamActivity</span> <span class="keyword">extends</span> <span class="title">BaseFragmentActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXAM_CENTER_URL = <span class="string">""</span>;</div><div class="line">    <span class="comment">//测试环境url</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXAM_CENTER_URL_TEST = <span class="string">""</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ERROR_URL = <span class="string">"file:///android_asset/404.html"</span>;</div><div class="line">    <span class="meta">@InjectView</span>(R.id.cordovaWebView)</div><div class="line">    <span class="keyword">protected</span> SystemWebView webView;</div><div class="line">    <span class="meta">@InjectView</span>(R.id.exam_home)</div><div class="line">    <span class="keyword">protected</span> LinearLayout examHome;</div><div class="line">    <span class="keyword">private</span> CordovaWebView cordovaWebView;</div><div class="line">    <span class="keyword">protected</span> CordovaInterfaceImpl cordovaInterface;</div><div class="line">    <span class="keyword">private</span> LoadingDialogFragment loading;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        setTitle(R.string.drawer_examination);</div><div class="line">        loading = LoadingDialogFragment.newInstance(<span class="keyword">false</span>, getString(R.string.loading));</div><div class="line">        loading.setCancelable(<span class="keyword">false</span>);</div><div class="line">        initWebView();</div><div class="line">        loadExamCenterUrl();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWebView</span><span class="params">()</span> </span>&#123;</div><div class="line">        ConfigXmlParser parser = <span class="keyword">new</span> ConfigXmlParser();</div><div class="line">        parser.parse(getActivity());</div><div class="line">        cordovaInterface = <span class="keyword">new</span> CordovaInterfaceImpl(getActivity()) &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">onMessage</span><span class="params">(String id, Object data)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (<span class="string">"onPageStarted"</span>.equals(id)) &#123;</div><div class="line">                    showRequestLoading();</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (<span class="string">"onPageFinished"</span>.equals(id)) &#123;</div><div class="line">                    hideRequestLoading();</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (<span class="string">"onReceivedError"</span>.equals(id)) &#123;</div><div class="line">                    cordovaWebView.loadUrl(ERROR_URL);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.onMessage(id, data);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">if</span> (NetworkUtils.isNetworkConnected(getActivity())) &#123;</div><div class="line">            webView.getSettings().setCacheMode(WebSettings.LOAD_DEFAULT);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            webView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);</div><div class="line">        &#125;</div><div class="line">        cordovaWebView = <span class="keyword">new</span> CordovaWebViewImpl(<span class="keyword">new</span> SystemWebViewEngine(webView));</div><div class="line">        <span class="keyword">if</span> (!cordovaWebView.isInitialized()) &#123;</div><div class="line">            cordovaWebView.init(cordovaInterface, parser.getPluginEntries(), parser.getPreferences());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadExamCenterUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (AppConfig.isApkInDebug()) &#123;</div><div class="line">            cordovaWebView.loadUrl(getExamCenterUrl(EXAM_CENTER_URL_TEST));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            cordovaWebView.loadUrl(getExamCenterUrl(EXAM_CENTER_URL));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getExamCenterUrl</span><span class="params">(String initUrl)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"http://www.baidu.com"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hideRequestLoading</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (loading) &#123;</div><div class="line">            loading.dismiss();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showRequestLoading</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (loading) &#123;</div><div class="line">            loading.show(getSupportFragmentManager());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        <span class="keyword">if</span> (cordovaWebView != <span class="keyword">null</span>) &#123;</div><div class="line">            cordovaWebView.handleResume(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        <span class="keyword">if</span> (cordovaWebView != <span class="keyword">null</span>) &#123;</div><div class="line">            cordovaWebView.handlePause(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        examHome.removeView(webView);</div><div class="line">        webView.removeAllViews();</div><div class="line">        <span class="keyword">if</span> (cordovaWebView != <span class="keyword">null</span>) &#123;</div><div class="line">            cordovaWebView.handleDestroy();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStart();</div><div class="line">        <span class="keyword">if</span> (cordovaWebView != <span class="keyword">null</span>) &#123;</div><div class="line">            cordovaWebView.handleStart();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">        <span class="keyword">if</span> (cordovaWebView != <span class="keyword">null</span>) &#123;</div><div class="line">            cordovaWebView.handleStop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，这里对声明周期的处理模仿了CordovaActivity的生命周期，同时对基本native加载流程做了简单处理。尤其onDestory中的处理可以避免报webview.destory()的错误。这段代码适用于任何一个没有extend CordovaActivity进行cordova开发的activity。</p>
<p>还有最最重要的一点：<strong>在正式打包apk的时候，一定要记得，在proguard-rules.pro文件中，去掉插件类的混淆</strong>，不能混淆插件类，否则打出来release包之后，进入混合开发的activity，会让你崩到爽……</p>
<p>OK，就是这样了，有什么疑问欢迎大家交流。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请注明出处：&lt;a href=&quot;http://richardcao.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://richardcao.me/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;网上有很多集成cordova到Andro
    
    </summary>
    
      <category term="hybrid" scheme="http://richard-cao.github.io/categories/hybrid/"/>
    
    
      <category term="cordova" scheme="http://richard-cao.github.io/tags/cordova/"/>
    
  </entry>
  
</feed>
